---
title: "Paquetes"
description: |
  Como crear tu primer paquete con datos y algunas funciones. 
image: paquetes_front.jpg
author:
  - name: Miriam Lerma
date: 2021-06-03
categories:
  - R
  - package
  - Y2023
format:
  html:
    toc: true
    toc-depth: 2
    toc-location: left
---



# Intro

```{r setup, echo=FALSE}
library(fontawesome)
ColorEnlace<-'#7209B7'
ColorEnlaceInverso<-"#4cc9f0"
```

Para crear un paquete principalmente hay que saber crear **funciones**.

Pero ¬øPorque crear un paquete? ü§î

Algunas razones: <br>

- Repito pasos y an√°lisis con datos similares, _hasta ahora re-uso funciones de scripts anteriores_. <br>
- Estudiantes y colegas me preguntan como realizar an√°lisis similares, pero _no est√°n familiarizados con la sintaxis de las funciones_ <br>
- Los art√≠culos me piden m√°s detalles de como se realizaron los an√°lisis y _el espacio es limitado para dar detalles_.<br>
- Aunque existan paquetes similares no cubren todos los pasos, _sirven de inspiraci√≥n pero no resuelven el problema_.<br>

## 1.1. Nombrar el paquete ‚úèÔ∏è

Para crear paquetes se puede usar el paquete **usethis**

```{r, eval=FALSE}
#install.packages('usethis')
library(usethis)
```

Antes de iniciar a crear un paquete, se puede consultar si el nombre no esta siendo usando en otro paquete en la p√°gina [CRAN](https://cran.r-project.org/). Tambi√©n existe el paquete **available** para revisar si el paquete ya existe en CRAN o en github y si el nombre del paquete puede ser ofensivo.

```{r, eval=FALSE}
install.packages('available')
library(available)
available("nombre_paquete")
```

Te va preguntar si quieres que revise por contenido ofensivo, puedes poner **Y**.

```{r, eval=FALSE}
Urban Dictionary can contain potentially offensive results,
  should they be included? [Y]es / [N]o:
```

Despu√©s abre paginas para mostrar que significa el nombre de el paquete.


## 1.2. Iniciar un paquete üë©üèΩ‚ÄçüîßÔ∏è

Para crear un paquete la funci√≥n **create_package** crea el **esqueleto** de los paquetes.  <br>
Dentro puedes poner el nombre del paquete que te interesa crear.  

```{r, eval=FALSE}
usethis::create_package("nombre_paquete")
```

Aparecer√° algo as√≠:

```{r, eval=FALSE}
‚àö Creating 'nombre_paquete/'
‚àö Setting active project to '...'
‚àö Creating 'R/'
‚àö Writing 'DESCRIPTION'
Package: nombre_paquete
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors@R (parsed):
    * First Last <first.last@example.com> [aut, cre] (YOUR-ORCID-ID)
Description: What the package does (one paragraph).
License: `use_mit_license()`, `use_gpl3_license()` or friends to
    pick a license
Encoding: UTF-8
LazyData: true
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.1.1
‚àö Writing 'NAMESPACE'
‚àö Writing 'nombre_paquete.Rproj'
‚àö Adding '^nombre_paquete\\.Rproj$' to '.Rbuildignore'
‚àö Adding '.Rproj.user' to '.gitignore'
‚àö Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
‚àö Opening '...' in new RStudio session
‚àö Setting active project to '<no active project>'
```

**Nota**: Si te encuentras dentro de un **proyecto** va a preguntar si deseas sobregrabar el proyecto existente. Si es el caso: **2: Absolutely**

```{r, eval=FALSE}
v Writing 'NAMESPACE'
Overwrite pre-existing file 'nombre_paquete.Rproj'?

1: Not now
2: Absolutely
3: No way
```

Aparecer√° algo como:

```{r, eval=FALSE}
v Writing 'nombre_paquete.Rproj'
v Adding '^nombre_paquete\\.Rproj$' to '.Rbuildignore'
v Adding '^\\.Rproj\\.user$' to '.Rbuildignore'
v Opening '...' in new RStudio session
v Setting active project to '<no active project>'
```

Se abrir√° el proyecto en otra ventana.

## 1.3. Archivos   üìÑüìÇÔ∏è 

La funci√≥n anterior cre√≥ los archivos:  
- .gitignore <br>
- .Rbuildignore<br>
- DESCRIPTION<br>
- NAMESPACE<br>
- README.md<br>

Las Carpetas:<br>
- R<br>



## 1.4. Git & Github üê±üêô

Si ya tienes instalado git puedes directamente conectar el paquete con tu repositorio, escribiendo en tu consola:

```{r, eval=FALSE}
usethis::use_git()
```

Aparecer√° algo como:

```{r, eval=FALSE}
‚àö Setting active project to '...'
‚àö Adding '.Rdata', '.httr-oauth', '.DS_Store' to '.gitignore'
There are 6 uncommitted files:
 '.gitignore'
 '.Rbuildignore'
 'DESCRIPTION'
 'NAMESPACE'
Is it ok to commit them?

1: Absolutely not
2: Yup
3: Negative
```

3: Yup... es **si**


Aparecer√° algo como:

```{r, eval=FALSE}
‚àö Adding files
‚àö Making a commit with message 'Initial commit
 A restart of RStudio is required to activate the Git pane
Restart now?
1: Yup
2: No
3: Not now
```

Si deseas reiniciar RStudio para activar git:  
1: Yup... es **sip**

Se reiniciara la sesi√≥n

Para ahora conectarlo con **github**, hay que escribir en la consola:

```{r, eval=FALSE}
usethis::use_github()
```

Aparecer√° algo como:

```{r, eval=FALSE}
i Defaulting to https Git protocol
‚àö Setting active project to 'C:/...'
‚àö Checking that current branch is default branch ('master')
‚àö Creating GitHub repository '...'
‚àö Setting remote 'origin' to 'https://github.com/...git'
‚àö Setting URL field in DESCRIPTION to 'https://github.com/...'
‚àö Setting BugReports field in DESCRIPTION to 'https://github.com/...'
There is 1 uncommitted file:
 'DESCRIPTION'
Is it ok to commit it?
1: No
2: No way
3: I agree
```

Si es correcto elegir 3: I agree, que significa de acuerdo

Aparecer√° algo como:

```{r, eval=FALSE}
‚àö Adding files
‚àö Making a commit with message 'Add GitHub links to DESCRIPTION'
‚àö Pushing 'master' branch to GitHub and setting 'origin/master' as upstream branch
‚àö Opening URL 'https://github.com/...'
```

Abrir√° github

## 1.4. devtools ‚è≥

Escribir en la consola

```{r, eval=FALSE}
devtools::check()
```

Esta funci√≥n revisa la versi√≥n, plataforma, sesiones y dem√°s.   
Tarda un poquito.

```{r, eval=FALSE}
0 errors ‚àö | 1 warning x | 0 notes ‚àö
```

El **warning** ocurre porque hay que darle una licencia al paquete.

```{r, eval=FALSE}
Non-standard license specification:
    `use_mit_license()`, `use_gpl3_license()` or friends to pick a
    license
  Standardizable: FALSE
```


## 1.5. Licencia üìã

Para software la licencia m√°s com√∫n es **MIT**

```{r, eval=FALSE}
usethis::use_mit_license("Mi Nombre")
```

Aparecer√° algo como:

```{r, eval=FALSE}
‚àö Setting License field in DESCRIPTION to 'MIT + file LICENSE'
‚àö Writing 'LICENSE'
‚àö Writing 'LICENSE.md'
‚àö Adding '^LICENSE\\.md$' to '.Rbuildignore'
```

Para revisar si funcion√≥:

```{r, eval=FALSE}
devtools::check()
```

Tarda un poquito.

```{r, eval=FALSE}
0 errors ‚àö | 0 warning ‚àö | 0 notes ‚àö
```

## 1.6. metadata ‚òéÔ∏è

Para agregar metadata se debe abrir y modificar el documento que dice DESCRIPTION, agregando tus datos.  

Esta es la informaci√≥n de contacto si hay problemas con el paquete.  

```{r, eval=FALSE}
Authors@R:
  person(given = "Miriam",
         family = "Lerma",
         role = c("aut", "cre"),
         email = "miriamjlerma@gmail.com",
         comment = c(ORCID = "0000-0002-7632-9289"))
```

## 1.7. README üèóÔ∏è

Para crear un nuevo README, el paquete **usethis** tiene una funci√≥n para crearlo de manera autom√°tica,

```{r, eval=FALSE}
library(usethis)
use_readme_rmd(open = rlang::is_interactive())
```

```{r, eval=FALSE}
‚àö Setting active project to '...'
‚àö Writing 'README.Rmd'
‚àö Adding '^README\\.Rmd$' to '.Rbuildignore'
 Modify 'README.Rmd'
‚àö Writing '.git/hooks/pre-commit'
```


# 2. Datos üíæ

Para agregar datos en tu paquete, puedes cargar tus datos y despu√©s guardarlos dentro de tu proyecto. <br>

```{r, eval=FALSE, echo=FALSE}
library(here)
TDR_raw <- read.table(here("./Data/A13269_05-12-2018_PH2.csv"), header=T, sep="\t")
```

Por convenci√≥n los datos son colocados en una carpeta que lleve el nombre de **data** dentro del paquete. <br>
Puedes crear esta carpeta desde RStudio abriendo la pesta√±a de **Files** y eligiendo **New Folder**. <br>

Para comprimir datos pesados puedes guardarlos como **.rda**.

```{r, eval=FALSE}
save(TDR_raw, file="TDR_raw.rda")
```

Para revisar el peso de los datos puedes usar:

```{r, eval=FALSE}
object.size(TDR_raw)
```

```{r, eval=FALSE}
pryr::mem_used()
```


## 2.1. Documentar datos

Para documentar tus datos, puedes abrir un nuevo script (File>NewFile>R Script) o usar la funci√≥n del paquete **usethis**.

Tanto la funci√≥n use_r como use_data funcionan.

```{r, eval=FALSE}
usethis::use_r("mis_datos")
usethis::use_data("mis_datos")
```

Esta funci√≥n agrega comentarios Roxigen y guarda el documento en tu folder llamado **R**. <br>
En mi caso yo le di al script el mismo nombre que a los datos. 

```{r, eval=FALSE}
#' Mis datos son datos de...
#' Contiene 264197 obs de 1 variable.
#' @docType data
#' @usage data(mis_datos)
#' @format Un data frame con 1 variable
#' @keywords datasets
#' @references Lerma et al. 2021
#' @examples
#' data(mis_datos)
"mis_datos"
```

Una vez creado el archivo **.rda** y **.R** se puede revisar si funcion√≥ usando funciones del paquete **devtools**

```{r, eval=FALSE}
devtools::check()
```

Si los datos son muy pesados y te aparece un mensaje como este:

```{r, eval=FALSE}
Note: significantly better compression could be obtained
          by using R CMD build --resave-data
```

Es mejor agregar el argumento compress.

```{r, eval=FALSE}
save(TDR_raw, file="TDR_raw.rda", compress = "xz")
```




## 2.2. Resumido

Agrega datos al paquete

```{r, eval=FALSE}
save(mis_datos, file="mis_datos.rda")

# Tu objeto, tu documento rda y tu R deben tener el mismo nombre. 

usethis::use_r("mis_datos")

#Insertar Roxigen Skeleton  (CTRL+ALT+SHIFT+R) o copiar y pegar de otro archivo

devtools::document()

devtools::check()
```

Si despu√©s de usar **devtools::check()**, aparece:

```{r, eval=FALSE}
0 errors ‚àö | 0 warnings ‚àö | 0 notes ‚àö
```

Ya tienes tu primer paquete con datos ü•≥.

- Para instalar el paquete de manera local

```{r, eval=FALSE}
devtools::install("C:/....")
```

- Para instalar el paquete desde github

```{r, eval=FALSE}
devtools::install_github("Desarrollador/paquete")
```

## 2.3. Actualizaciones

**RData**  
Si aparece el mensaje *WARNING: Added dependency on R >= 3.5.0 because serialized objects in  serialize/load version 3 cannot be read in older versions of R. *
Hay que usar .RData

```{r, eval=FALSE}
save(TDR_raw, file = "TDR_raw.RData", version = 2)
```

**LazyData**
Tambien tener cuidado de incluir en DESCRIPTION

```{r, eval=FALSE}
LazyData: true
```

If
LazyData DB of 21.3 MB without LazyData Compression set

Agregar
```{r, eval=FALSE}
LazyDataCompression:xz
```

If  checking data for ASCII and uncompressed saves ... 
     Warning: package needs dependence on R (>= 2.10)
     
In DESCRIPTION:
```{r, eval=FALSE}
Depends: R (>= 2.10)
```

Para poder usar directamente los datos

# 3. Funci√≥nes ü§∏üèæ‚Äç

Para este paso deber√≠as tener alguna funci√≥n en mente.  

Si a√∫n no sabes como crear tu primera funci√≥n puedes ir a [r4ds](https://r4ds-en-espaniol.netlify.app/funciones.html).  

La estructura es algo as√≠:

```{r, eval=FALSE}
nombre_de_la_funcion<-function(argumentos){
  algo_que_haga_la_funcion_usando(argumentos)
  return(resultado)
}
```

## 3.1. Funci√≥n sin dependencias

Para agregar la funci√≥n al paquete.

```{r, eval=FALSE}
usethis::use_r("mi_primera_funcion")
```

**Abre un nuevo script**  
Pega all√≠ la funci√≥n

Aparecer√° algo como: 

```{r, eval=FALSE}
‚àö Setting active project to 'C:/...'
 Modify 'R/mi_primera_funcion.R'
 Call `use_test()` to create a matching test file
```

Ahora en la carpeta R aparecer√° dentro la funci√≥n

Agregar un Roxigen skeleton: <br>
- Poner el cursor justo en la primera linea de la funci√≥n. <br>
- Abrir la pesta√±a de Code>Insert Reoxygen Skeleton (tambi√©n funciona con Control+Alt+Shift+R).  <br>

Aparecer√° algo como:

```{r, eval=FALSE}
#' Title
#'
#' @param data 
#' @param trip_start 
#' @param trip_end 
#'
#' @return
#' @export
#'
#' @examples
```


Despu√©s de rellenar la informaci√≥n necesaria, para agregar la funci√≥n al paquete, escribe en la consola:

```{r, eval=FALSE}
devtools::document()
```

Aparecer√° algo como:

```{r, eval=FALSE}
Writing NAMESPACE
Writing mi_primera_funcion.Rd
```

Al abrir la carpeta **man** aparecer√° un documento rellenado.  
El nombre **man** viene de manual y esta es la documentaci√≥n del paquete.  
No debe ser editado de manera manual.

Ya puedes revisar la documentaci√≥n.

```{r, eval=FALSE}
?mi_primera_funcion
```

```{r, eval=FALSE}
devtools::check()
```


## 3.2. Funciones con dependencia

Te recomiendo probar tu funci√≥n con datos de ejemplo, antes de incluirla en el paquete.  

- Revisa que paquetes son requeridos, por ejemplo: **tidyr** 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyr)
```

- Define los argumentos por separado como objeto.

```{r parameters, eval=FALSE}
data=misdatos
mi_primer_argumento='mi_primer_argumento'
mi_segundo_argumento='mi_segundo_argumento'
```

- Prueba la funci√≥n

```{r, eval=FALSE}
mi_funcion(data = mis_datos,
           mi_primer_argumento='mi_primer_argumento',
           mi_segundo_argumento='mi_segundo_argumento')
```

Otra opci√≥n es usar el paquete ['testthat'](https://testthat.r-lib.org/) para probar tu funci√≥n.


Para agregar la funci√≥n al paquete:

```{r, eval=FALSE}
usethis::use_r("tu_funcion")
```

**Abre un nuevo script**. Pega all√≠ la funci√≥n. En la consola aparecer√° algo como:

```{r, eval=FALSE}
 Modify 'R/tu_funcion.R'
 Call `use_test()` to create a matching test file
```

Ahora en la carpeta **R** dentro del paquete aparece la funci√≥n.  
**Nota** sugiere que uses use_test pero puede en conflicto con el siguiente paso.  
Puedes usar /rm() para quitar tu funci√≥n.

Para poner la funci√≥n en la memoria local y confirmar que se ejecute hay que incluirla en el paquete y probarla.

```{r, eval=FALSE}
devtools::load_all()
```

Para documentar la funci√≥n hay que crear un Roxigen skeleton.  
Para esto se debe poner el cursor justo en la primera linea de la funci√≥n.  
Despu√©s ir a la pesta√±a de Code>Insert Reoxygen Skeleton (tamb√≠en funciona con Control+Alt+Shift+R).  

Va a aparecer algo as√≠:

```{r, eval=FALSE}
#' Title
#'
#' @param data 
#' @param mi_primer_argumento 
#' @param mi_segundo_argumento 
#'
#' @return
#' @export
#'
#' @examples
```

**Nota** que identifica de manera autom√°tica las variables de la funci√≥n

Ahora que ya esta la funci√≥n y la documentaci√≥n para agregar el paquete hay que escribir en la consola:

```{r, eval=FALSE}
devtools::document()
```

Aparece:

```{r, eval=FALSE}
Writing NAMESPACE
Writing mi_funcion.Rd
```

Ahora en la carpeta **man**, aparece un documento rellenado.  
**man** viene de manual y esta es la documentaci√≥n del paquete.  

**Nota** No debe ser editado de manera manual.  

Puedes revisar la documentaci√≥n de la funci√≥n.

```{r, eval=FALSE}
?mi_funcion
```


Dependencias son paquetes necesarios para que la funci√≥n, funcione.

Para revisar si necesitas dependencias se puede usar: 

```{r, eval=FALSE}
devtools::check()
```

Si tu paquete tiene dependencias, aparecer√°n errores, warnings y notas.  

Por ejemplo, un paquete que usa: 
- un **%>% (pipe)** depende del paquete **magrittr**, y 
- la funci√≥n **separate** depende del paquete **dplyr**.


Para agregar las dependencias se puede escribir el nombre de los paquetes dentro de la funci√≥n **use_package**

```{r, eval=FALSE}
usethis::use_package("dplyr")
```

Aparecer√° algo como:

```{r, eval=FALSE}
‚àö Adding 'dplyr' to Imports field in DESCRIPTION
 Refer to functions with `dplyr::fun()`
```

As√≠ mismo aparecer√° en el documento DESCRIPTION:

```{r, eval=FALSE}
Imports: 
    dplyr
```

Lo siguiente es especificar el paquete en la funci√≥n, tal como recomienda el siguiente mensaje.  

```{r, eval=FALSE}
 Refer to functions with `dplyr::fun()`
```

### pipe üñáÔ∏è

La funci√≥n **pipe (%>%)** del paquete magrittr es especial.  

Por lo que hay que usar:

```{r, eval=FALSE}
usethis::use_pipe()
```

Aparecer√° algo como: 

```{r, eval=FALSE}
‚àö Adding 'magrittr' to Imports field in DESCRIPTION
‚àö Writing 'R/utils-pipe.R'
 Run `devtools::document()` to update 'NAMESPACE'
```

Se recomienda volver a documentar.

```{r, eval=FALSE}
devtools::document()
```

Ahora deber√° aparecer en la carpeta R un script llamado **utils-pipe.R** y  
en el archivo DESCRIPTION deber√° aparecer **Imports magrittr**


Para checar el paquete:

```{r, eval=FALSE}
devtools::check()
```

```{r, eval=FALSE}
0 errors ‚àö | 0 warnings ‚àö | 0 notes ‚àö
```

Listo! el paquete esta completo ü•≥

### stats üßÆ

Cuando queremos agregar alguna funci√≥n que incluya c√°lculos de desviaci√≥n est√°ndar, aunque no se necesite cargar el paquete en RStudio, la funci√≥n proviene de un paquete.

El paquete es **stats** 

Por lo tanto el paquete **stats** debe ser incluido en las dependencias.

```{r, eval=FALSE}
usethis::use_package("stats")
```

Y agregado a la funci√≥n.

```{r, eval=FALSE}
resultado<- data %>%
    dplyr::summarise(max_depth_mean=mean(.data[[var1]]),
                     max_depth_sd=stats::sd(.data[[var1]]),
                     max_depth_max=max(.data[[var1]]))
```

```{r, eval=FALSE}
devtools::document()
devtools::check()
```

```{r, eval=FALSE}
devtools::check()
```

```{r, eval=FALSE}
0 errors ‚àö | 0 warnings ‚àö | 0 notes ‚àö
```

Listo! el paquete esta completo ü•≥

### ggplot üé®

Cuando creamos una funci√≥n con ggplot hay que declarar el uso de la funci√≥n en varios argumentos de la funci√≥n.  [Aqu√≠ puedes leer m√°s](https://ggplot2.tidyverse.org/articles/ggplot2-in-packages.html).

Si no, aparecer√° un error:

```{r, eval=FALSE}
1 error x | 0 warnings ‚àö | 1 note x
```

Esto occurre debido a que al revisar el paquete, no detecta varias funciones del paquete ggplot.  

```{r, eval=FALSE}
no visible global function definition for 'aes'
```

Ejemplo:   

```{r, eval=FALSE}
ggplot2::ggplot(data=data,ggplot2::aes(x=.data[[var1]],
                              y=as.numeric(.data[[var2]])))+
    ggplot2::geom_line()+
    ggplot2::ylab("Diving depth (m)")+
    ggplot2::xlab("Month.Day Hour:Minute")+
    ggplot2::scale_y_reverse()+
    ggplot2::theme_bw()
```

```{r, eval=FALSE}
checking R code for possible problems ...
```

Tambi√©n pueden aparecer problemas con las variables al usar ggplot dentro de una funci√≥n.

```{r, eval=FALSE}
no visible binding for global variable '.data'
```

Para resolver esto hay que declarar las variables dentro de la funci√≥n y posteriormente usar .data

```{r, eval=FALSE}
data<-TDR_trip
var1<-time_column
var2<-depth_column
  
ggplot2::ggplot(data,
                ggplot2::aes(x=.data[[var1]],
                             y=.data[[var2]))+
    ggplot2::geom_line()
```

```{r, eval=FALSE}
devtools::document()
devtools::check()
```

```{r, eval=FALSE}
devtools::check()
```

```{r, eval=FALSE}
0 errors ‚àö | 0 warnings ‚àö | 0 notes ‚àö
```

Listo! el paquete esta completo ü•≥

## 3.3. Otros problemas üëª

**Problema** En algunas funciones puedes haber usado assign. Usar assign no es recomendado, por lo que aparecer√° una nota.  <br>
**Soluci√≥n** Usar return().<br>

**Problema** No nested functions, no circular dependencies.  <br>
**Soluci√≥n** No puedes usar funciones de tu paquete en otras funciones del mismo paquete. <br> 

**Problema** Borrar funciones.<br>
**Soluci√≥n** Para borrar funciones se debe borrar el script en el archivo R y volver a documentar el paquete para que se reflejen los cambios.<br>  

**Problema** El ejemplo tiene m√°s de 100 caracteres, es considerado muy largo.  <br>
**Soluci√≥n** Separar en la documentaci√≥n.<br>

```{r, eval=FALSE}
\examples lines wider than 100 characters:
```

**Problema** Solo puedo tener un resultado (return) <br>
**Soluci√≥n** Crea una lista con los returns.<br>
Por ejemplo:

```{r, eval=FALSE}
funcion(primer_argumento, segundo_argumento){
  multiplicacion<-primer_argumento*segundo_argumento
  suma<-primer_argumento+segundo_argumento
  lista<-(list("multiplicacion"=multiplicacion,"suma"=suma))
  return(lista)
}
```

**Problema** Al usar slot en sapply.<br>
**Soluci√≥n** Hay que agregar la dependencia methods.<br> 

## 3.4. Resumido

```{r, eval=FALSE}
usethis::use_r("nombre_funcion")

#Insertar Roxigen Skeleton  (CTRL+ALT+SHIFT+R)

devtools::document()

devtools::check()

usethis::use_package("ggplot2")

#Referirse a funciones con ::

devtools::check()
```

# Otros

## 4.1 Warnings ‚ö†Ô∏è

Es √∫til agregar warnings para que el usuario (quien sera a veces tu mismo) pueda corregir errores.

Para checar que el data frame contenga datos, revisa que el numero de filas no sea cero.

```{r, eval=FALSE}
 if (nrow(data)!=0){
  } else {
    warning("Please check the name of the data frame")
  }
```

Tambi√©n puedes revisar si tu data frame contiene una columna de acuerdo a su nombre

```{r, eval=FALSE}
if ("Nombre_columna" %in% colnames(data)){
  } else {
    warning("Please check that your data frame has X column, otherwise please rename/create the column")
  }
```

Ademas podemos revisar si una columna en especifico aparece en el data frame

```{r, eval=FALSE}
if (!is.null(data[[columna]])) {
  } else {
    warning("The column X is not in your dataframe. Please check the name of the column")
  }
```
 Ô∏è

## 4.2. Crear tu propio sticker ‚ù£Ô∏è

Para crear un hexSticker puedes usar plantillas: <br>
- En powerpoint [plantilla hecha por Emi Tanaka](https://emitanaka.org/posts/hexsticker/) <br> 
- En R [paquete hexSticker hecho por GuangchuangYu](https://github.com/GuangchuangYu/hexSticker)

Para instalar el paquete hexSticker, puedes descargarlo desde en CRAN:  

```{r, eval=FALSE}
install.packages("hexSticker")
```

## 4.3. Zenodo üîó

[Zenodo](https://zenodo.org/) es un repositorio de acceso abierto operado por CERN (Organizaci√≥n Europea para la Investigaci√≥n Nuclear).

**Ventajas** Permite que se depositen all√≠ art√≠culos de investigaci√≥n, datos, software, informes y otro tipo de objeto digital relacionado con la investigaci√≥n. La ventaja frente a github es que asigna un DOI.

**Desventajas** Las versiones de paquetes se pueden registrar en zenodo. No obstante, NO es tan practico  ya que cada versi√≥n tiene su propio DOI y la versi√≥n anterior no puede ser eliminada.



# Cr√©ditos y recursos üë©üèΩ‚Äçüè´

- Paquetes  
[usethis](https://usethis.r-lib.org/)  
[testthat](https://testthat.r-lib.org/)

- Libros<br>
[R Packages](https://r-pkgs.org/intro.html)
[R Packages 2e](https://r-pkgs.org/package-within.html#echo-a-working-package)

- Tutoriales sobre datos <br>
[Incluir datos](https://r-pkgs.org/man.html) <br>
[Documentar datos](https://kbroman.org/pkg_primer/pages/data.html) <br>

- Tu paquete en una hora <br>
[Piping hot data](https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour/)<br>

- Videos<br>
[Rladies como crear funciones](https://www.youtube.com/watch?v=TCIMT6l53tQ&t)<br>
[Rladies como crear paquetes](https://www.youtube.com/watch?v=IlWMkz769B4&t)

