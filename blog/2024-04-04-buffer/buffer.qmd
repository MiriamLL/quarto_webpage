---
title: "Create a buffer"
description: |
  This post is about how to create a spatial buffer of 1 km around a point.
author:
  - name: Miriam Lerma
    url: {}
date: 2024-04-04
image: buffer_front.jpg
format:
  html:
    toc: true
    toc-depth: 2
    toc-location: left
categories:
  - R
  - ggplot2
  - English
  - Y2024
  - tracking
---

# Intro

In this blog, a buffer subsetting environmental data would be created and the average values within the buffer calculated.

# 1. Download data

Load the package **rerddap**

```{r, eval=FALSE}
library("rerddap")
```

```{r, eval=FALSE}
SST_info <- info('erdMWsstd1day_LonPM180')
```

To subset the data select the coordinates of a smaller area.

```{r, eval=FALSE}
lonmin<--111
lonmax<--109
latmin<-23
latmax<-27
```

To download, provide the parameters such as the server, the coordinates and the time frame. It takes some time to download.

```{r, eval=FALSE}
SST_values<-griddap(SST_info, 
                    latitude= c(latmin, latmax), longitude = c(lonmin, lonmax), 
                    time = c('2023-03-01T00:00:00Z','2023-03-30T00:00:00Z'), 
                    fields = 'sst')
```

To access the data as data frame, extract the data.

```{r, eval=FALSE}
SST_df<-SST_values$data
```

Using functions from the package tidyverse, remove all NAs.

```{r, warning=FALSE, eval=FALSE}
library(tidyverse)
```

```{r, eval=FALSE}
SST_dfclean<-SST_df %>%
  filter(sst!='NaN')
```

## Map

Check data downloaded using ggplot.

```{r, eval=FALSE}
library(ggplot2)
```

Download data from land from the package **rworldmap**.

```{r, eval=FALSE}
library(rworldmap)
```

The function *getMap()* loads the map in your environment.

```{r, eval=FALSE}
world_map <- getMap()
```

To plot using ggplot a data frame is recommended. Use the function *fortify* to be able to get the data in a data frame format.

```{r, warning=FALSE, eval=FALSE}
world_points <- fortify(world_map)
world_points$region <- world_points$id
world_df <-world_points[,c("long","lat","group", "region")]
```

```{r, fig.height=4, eval=FALSE}
ggplot() +
 geom_raster(data=SST_dfclean,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = "H")+
 geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = "#e5e5e5") +
 coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))
```

# 2. Create buffer

Load package **sp**.

```{r, eval=FALSE}
library(sp)
```

Give coordinates from the central point.

```{r, eval=FALSE}
This_point<-data.frame(Longitude=-109.37728617302638,Latitude=24.92572600240793)
```

Use this custom function to create a buffer. Note that it uses epsg 4236, adjust if necessary.

```{r, eval=FALSE}
create_buffer<-function(central_point=central_point, buffer_km=buffer_km){
  central_spatial<- sp::SpatialPoints(cbind(central_point$Longitude,central_point$Latitude)) 
  sp::proj4string(central_spatial)= sp::CRS("+init=epsg:4326") 
  central_spatial <- sp::spTransform(central_spatial, sp::CRS("+init=epsg:4326"))
  central_spatial<-sf::st_as_sf(central_spatial)
  buffer_dist<-buffer_km*1000
  central_buffer<-sf::st_buffer(central_spatial, buffer_dist)
  return(central_buffer)
  }
```

The central point and the kilometers are the arguments needed.

```{r, warning=FALSE, eval=FALSE}
This_buffer<-create_buffer(central_point=This_point,buffer_km=20)
```

Confirm that the buffer is not a SpatialPolygons.

```{r, eval=FALSE}
class(This_buffer)
```

## Map

Use ggplot to create the map.\
Use the functions **geom_raster** to plot the SST data.\
The function **geom_polygon** to plot the base maps data.\
The function **geom_polygon** to plot the buffer.\
Adjust to your corresponding area on the **coord_sf**.

```{r, fig.height=4, warning=FALSE, eval=FALSE}
ggplot() +
 geom_raster(data=SST_dfclean,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = "H")+
 geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = "#e5e5e5") +
 coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))+
 geom_polygon(data=This_buffer,aes(x = long, y = lat, group = group),colour='black', fill='transparent', linetype='dashed')+
 geom_point(data=This_point, aes(x=Longitude, y=Latitude), colour = "black", size = 4)
```

# 3. Extract information

Convert the SST data into a SpatialPointsDataFrame.

```{r, eval=FALSE}
SST_sp <- SST_dfclean
sp::coordinates(SST_sp) <- ~longitude + latitude
sp::proj4string(SST_sp) = sp::CRS("+init=epsg:4326")
```

Use the function **over** from the package **sp** to extract the SST data using the buffer.

```{r, eval=FALSE}
SST_buffer<- over(SST_sp,This_buffer)
```

The SST values that fall inside the buffer are now added as a column named **sst_inside** in the data frame.

```{r, eval=FALSE}
SST_dfclean$sst_inside <- as.numeric(SST_buffer)
```

The values that fall inside the buffer are shown as **1**.\
To keep only the data inside the buffer select only those rows with values inside the buffer using the function **filter**.

```{r, eval=FALSE}
SST_inside<-SST_dfclean %>%
  filter(sst_inside==1)%>%
  drop_na(sst)
```

## Subset

To plot the SST data, select the information from the new data frame **SST_inside** and the function **geom_raster** to plot the information.

```{r, fig.height=4, eval=FALSE}
ggplot() +
  geom_raster(data=SST_inside,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = "H")+
  geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = "#e5e5e5") +
  coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))+
  geom_polygon(data=This_buffer,aes(x = long, y = lat, group = group),colour='black', fill='transparent', linetype='dashed')+
  geom_point(data=This_point, aes(x=Longitude, y=Latitude), colour = "black", size = 4)+
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill='transparent'))
```

```{r, echo=FALSE, eval=FALSE}
library(here)
here()
ggsave(ggplot() +
  geom_raster(data=SST_inside,aes(x=lon, y=lat, fill = sst))+ scale_fill_viridis_c(option = "H")+
  geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = "#e5e5e5") +
  coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))+
  geom_polygon(data=This_buffer,aes(x = long, y = lat, group = group),colour='black', fill='transparent', linetype='dashed')+
  geom_point(data=This_point, aes(x=Longitude, y=Latitude), colour = "black", size = 4)+
  theme(panel.background = element_blank(),
        panel.border = element_rect(colour = "black", fill='transparent')), 
       filename = paste0(here(),"/_posts/2024-04-11-buffer/blog32.jpg"),
       width = 6, 
       height = 4, 
       units = "in",
       dpi = 300)
```

Use the values inside the buffer to calculate the average SST

```{r, eval=FALSE}
mean(SST_inside$sst)
sd(SST_inside$sst)
```

```{r, echo=FALSE, out.width = "40%"}
knitr::include_graphics(paste0(here::here(),"/blog/2024-04-04-buffer/buffer_export.jpg"))
```

End of document
