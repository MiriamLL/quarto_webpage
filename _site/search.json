[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Miriam Lerma",
    "section": "",
    "text": "About me\nI am part of the Seevogelmonitoring team at the Dachverband Deutscher Avifaunisten DDA. My work entitles analyzing spatial patterns of marine animals.\nI am also collaborating on active tracking projects for Germany (FTZ), Mexico (CICESE) and Chile (UCN).\nMy research interests include conservation, ecology, physiology, and ecotoxicology.\nI recently started to do freelance work. I assist on fieldwork, data analyses and visualizations. I am currently available for hire.\nYou can download my cv here.\n\n Contact\nDr. rer. nat. Miriam Lerma  Email: miriamjlerma@gmail.com"
  },
  {
    "objectID": "blog/2023-01-27-qgispolygon/qgispolygon.html",
    "href": "blog/2023-01-27-qgispolygon/qgispolygon.html",
    "title": "Custom made polygon",
    "section": "",
    "text": "This post is to give you an example on how to create your own polygon using google maps.\n\n\nFor this exercise we used the release candidate of QGIS, but every version has the option to create new layers, so no worries in which version you are using.\n\n\n\nIf you still dont have it, here is the link for download QGIS\n\n\n\nIn earlier QGIS versions, there was a plugin called Open Layers plugin, but is not available anymore (as far as I am aware of).\nNow to add a google satellite map in your QGIS you could do the following:\n\nGo to View > Panels > Activate Browser Panel\n\n\n\n\n\nNow go to XYZ > a new connection\n\n\n\n\n\nA new window will appear\n\n\n\n\n\nFill in the spaces with the map you want to use\n\nYou need to give it a name and the URL\nThere are many options of maps, you can look at some here: Google URLs\nWe will use Open Street Map: https://tile.openstreetmap.org/{z}/{x}/{y}.png for the example.\n\n\n\nOnce you have create the connection, double click on the name and the map should be loaded as a layer.\n\n\n\nReady to Use!\n\n\n\n\n\n\n\nSelect New Shapefile Layer\n\n\n\n\n\nGive a name to your new shapefile\n\nI recommend to click on the three dots to select also the directory\nIn the exercise, we will create a polygon, therefore, select Polygon in Geometry type\n\n\n\n\nSelect Layer > Toggle editing, or just click on the icon with the yellow pencil\n\n\n\n\n\nNow add polygon feature by clicking on the green polygon icon\n\n\n\n\n\nUse the pointer of your mouse and click one time to create points\n\nThe areas will start to look red\nKeep clicking until you have a more or less the polygon you want\nWhen you finish you should add an id, here I used the number 1 for an example\n\n\n\nNow you should have a polygon!\n\nTo edit the shapes you can use the vertex tool\n\n\n\n\n\nThe corners can be moved/dragged when the icon has been selected\n\n\n\n\n\nNew points can be created using the cross\n\n\n\n\n\nWhen you are editing your layer you will have a red pencil icon, click on the yellow pencil for finish editing\n\n\n\n\n\nDo not forget to save the changes!\n\n\n\n\n… Now you are done!\nI hope this helped you.\n\n\n\nFor continuing learning, here are other uses of google maps:\n\nMedium\nAdd background map\nGoogle API\nGoogle URLs"
  },
  {
    "objectID": "blog/2023-02-04-subset-shapefile/subset-shapefile.html",
    "href": "blog/2023-02-04-subset-shapefile/subset-shapefile.html",
    "title": "Subset shapefile",
    "section": "",
    "text": "Intro\nThree steps to subset a shapefile and export a new shapefile with the attributes you are interested in.\n\n\n1. Load shapefile\nLoad the package sf to load your shapefile into R\n\nlibrary(sf)\n\nLoad the package here to use your directory (in which folder is your shapefile)\n\nlibrary(here)\n\n\n\n\nLoad your shapefile, be careful with your directory\n\nOld_shapefile<- read_sf(paste0(My_directory,'/original_shapefile.shp'))\n\nCheck the class, theoretically it would show sf\n\nclass(Old_shapefile)\n\nExplore the contents\n\nstr(Old_shapefile)\n\nCheck the values in the column that you are interested to subset, to show unique values use the argument unique and to show them in alphabetic order use sort\n\nsort(unique(Old_shapefile$comuna))\n\n\n\n2. Filter\nLoad the package tidyverse\n\nlibrary(tidyverse)\n\nUsing the function filter you can subset your old new shapefile and get the new one\nIn the example we used the column comuna and the value we are interested is La Higuera, do not forget to replace those values\n\nNew_shapefile<-Old_shapefile %>%\n  filter(comuna==\"La Higuera\")\n\n\n\n3. Export your new shapefile\nCheck the class of your new object\n\nclass(New_shapefile)\n\nExport to your selected directory\n\nst_write(New_shapefile, paste0(My_directory,'/New_shapefile.shp'))\n\n\n\nRead more\n\nGeocomputation with R"
  },
  {
    "objectID": "blog/2023-03-04-mapping-in-r/mapping-in-r.html",
    "href": "blog/2023-03-04-mapping-in-r/mapping-in-r.html",
    "title": "Mapping in R",
    "section": "",
    "text": "How to create a map in ggplot and add attributes.\n\n\nYou can download shapefiles from: https://www.naturalearthdata.com/downloads/\nCall the package here to work in your directory.\n\nlibrary(here)\n\nCall the package sf to read the shapefiles into R\n\nlibrary(sf)\n\n\n\n\nUse your directory name, and give the name of your shapefile\n\n\n\n\nEurope<-st_read(paste0(Directory,MyShapefileName))\n\n\n\n\nLoad ggplot2\n\nlibrary(ggplot2)\n\nPlot your shapefile\n\nggplot()+  \n  geom_sf(data = Europe)\n\n\n\n\nI copy the hex colors from coolors\n\nggplot()+  \n  geom_sf(data = Europe, \n          colour = \"#edf2f4\", \n          fill = \"#2b2d42\",\n          size=0.5)\n\n\n\n\nYou can eliminate the grids and the change the background color in ggplot\n\nggplot()+  \n  geom_sf(data = Europe, \n          colour = \"#edf2f4\", \n          fill = \"#2b2d42\",\n          size=0.5)+\n  theme(\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = '#edf2f4'),\n        legend.background = element_rect(fill = '#edf2f4'))\n\n\n\n\nReduce to focus in your area of interest\n\nggplot()+  \n  geom_sf(data = Europe, \n          colour = \"#edf2f4\", \n          fill = \"#2b2d42\",\n          size=0.5)+\n  theme(\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = '#edf2f4'),\n        legend.background = element_rect(fill = '#edf2f4'))+\n  \n  coord_sf(xlim = c(9, 31),ylim = c(53, 65))\n\n\n\n\nLoad the package ggspatial to add a scale and an north arrow\n\nlibrary(ggspatial)\n\nbr is from bottom right\nbar_cols is for column colors\ntext_col is for the color of the text\n\nggplot()+  \n  geom_sf(data = Europe, \n          colour = \"#edf2f4\", \n          fill = \"#2b2d42\",\n          size=0.5)+\n  theme(\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = '#edf2f4'),\n        legend.background = element_rect(fill = '#edf2f4'))+\n  \n  coord_sf(xlim = c(9, 31),ylim = c(53, 65))+\n    scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n    scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\")) +\n  \n  annotation_scale(location = \"br\",bar_cols = c(\"#ef233c\", \"#d90429\"),text_col = '#ef233c')\n\n\n\n\ntl is for top left\nwhich_north preferably true (see why here)\nnorth_arrow_fancy_orienteering (see other styles here)\n\nggplot()+  \n  geom_sf(data = Europe, \n          colour = \"#edf2f4\", \n          fill = \"#2b2d42\",\n          size=0.5)+\n  theme(\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill = '#edf2f4'),\n        legend.background = element_rect(fill = '#edf2f4'))+\n  \n  coord_sf(xlim = c(9, 31),ylim = c(53, 65))+\n    scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n    scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\")) +\n  \n   annotation_scale(location = \"br\",bar_cols = c(\"#ef233c\", \"#d90429\"),text_col = '#ef233c')+\n  \n  annotation_north_arrow(location = \"tl\", style = north_arrow_minimal(text_col = '#ffd60a',line_col = '#ffd60a',fill = '#ffd60a')) \n\nThats it for now!"
  },
  {
    "objectID": "blog/2023-04-06-gridraster/gridraster.html",
    "href": "blog/2023-04-06-gridraster/gridraster.html",
    "title": "Grid, Raster, Colors",
    "section": "",
    "text": "The goal of this post is to:\n1- Create a grid  2- Extract values per grid  3- Keep only grid cells with values  4- Calculate mean values per grid  5- Customize raster plot \n\n\nFor this example, we will use the data provided in the package sula  The data is from tracked masked boobies at Rapa Nui  The data is already in tidy format \n\nmy_data<-(sula::GPS_preparado)"
  },
  {
    "objectID": "blog/2023-05-05-github-page/github-page.html",
    "href": "blog/2023-05-05-github-page/github-page.html",
    "title": "Github page presentations",
    "section": "",
    "text": "The goal of this post is to:\n\nCreate a github page for a presentation\n\nFor the example, a xaringan presentation is to be deployed as github page for easy access\n\n\nYou need to have a repository, if you are first time creating a reposotory, here are some instructions\n\n\n\nGo to your repository, select settings\nIn the right side of the screen select pages\n\n\n\n\n\n\nLook for build and deployment and in source, move from GitHub Actions to Deploy from branch\n\n\n\n\n\n\nThe branch depends where the html file is, here I have it in the master branch\n\n\n\nThis would depend where you have your html file, but here I have it in the master\n\n\n\n\n\n\nIf everything went well Your site is alive at will appear\n\n\n\n\n\n\nTo access specific slides from different presentations, add the html name at the end of the site.\nFor example:\n\nhttps://miriamll.github.io/R_intro/IntroToR_0604.html#1\n\n\n\n\nThe slides can also be converted to pdf\nInstall package using install.packages(“renderthis”)\n\nlibrary(renderthis)\n\n\nto_pdf(from=\"https://miriamll.github.io/R_intro/DataWrangling_1205.html\")\n\n\n\n\n\nGithub Pages\n\nrenderthis"
  },
  {
    "objectID": "blog/2023-06-01-gganimate/gganimate.html",
    "href": "blog/2023-06-01-gganimate/gganimate.html",
    "title": "gganimate",
    "section": "",
    "text": "How to create a map an animation using gganimate\n\n\nLoad and/or install the following packages:\n\nlibrary(here)\nlibrary(tidyverse)\n\n\n\n\n\nlibrary(sula)\n\n\nExample<-GPS_01\n\n\n\n\nMark a day zero to begging the animation, and the sequence to use\n\nfirst(Example$DateGMT)\n\n\nExample$date_diff <- as.Date(as.character(Example$tStamp), \n                             format=\"%Y-%m-%d\")-\n  as.Date(as.character('2017-11-02'), \n          format=\"%Y-%m-%d\")\n\nCreate number sequence for animation\n\nExample<-Example %>% \n  group_by(IDs) %>%\n  mutate(Secuencia = row_number())\n\n\n\n\nFor creating maps, the package sf is to be called.\n\nlibrary(sf)\n\nNow load your data, here I am giving my directory, you should use the one on your computer.\nTo dowload the shapefile from Chile you can use this this link, this shapefile comes from the DIVA-GIS\n\n\n\n\nCountry<-st_read(paste0(Directory,MyShapefileName))\n\n\n\n\nPlot the area of interest\n\nMy_map<-ggplot(data=Example)  + \n  geom_sf(data = Country,colour = \"#edf2f4\", fill = \"#2b2d42\",)+\n  geom_point(data=Example,aes(x = Longitude, y=Latitude))+\n  geom_path(data=Example,aes(x = Longitude, y=Latitude))+\n  coord_sf(xlim = c(-110,-109), ylim = c(-27.5,-26.5))\nMy_map\n\n\n\n\n\nMy_map<-My_map+\n theme_bw()+\n\n  theme(\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = '#edf2f4'),\n    \n    axis.text.x =  element_text(size=12,color = \"black\"),\n    axis.text.y =  element_text(size=12,color = \"black\"),\n    \n    axis.ticks.x = element_line(color = \"black\"),\n    axis.ticks.y = element_line(color = \"black\"),\n    \n    title = element_text(colour = \"black\"),\n    legend.position = \"none\")+\n  \n    scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n    scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\"))\nMy_map\n\n\n\n\nTo animate this plot, we will use the package gganimate\n\nlibrary(gganimate)\n\nBecause animations might take some time, I like to use the package beepr to let me know when the animation is ready\n\nlibrary(beepr)\n\ntransition_reveal leaves the track on the back ground so you can keep record where it was\n\nMy_animation<-ggplot(data=Example)  + \n  geom_sf(data = Country,colour = \"#edf2f4\", fill = \"#2b2d42\",)+\n  geom_point(data=Example,aes(x = Longitude, y=Latitude, colour = tStamp))+\n  geom_path(data=Example,aes(x = Longitude, y=Latitude))+\n  coord_sf(xlim = c(-110,-109), ylim = c(-27.5,-26.5))+\n  \n  theme_bw()+\n\n  theme(\n    panel.grid.major = element_blank(), \n    panel.grid.minor = element_blank(),\n    panel.background = element_rect(fill = '#edf2f4'),\n    \n    axis.text.x =  element_text(size=12,color = \"black\"),\n    axis.text.y =  element_text(size=12,color = \"black\"),\n    \n    axis.ticks.x = element_line(color = \"black\"),\n    axis.ticks.y = element_line(color = \"black\"),\n    \n    title = element_text(colour = \"black\"),\n    legend.position = \"none\")+\n  \n    scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n    scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\")) +\n  \n  transition_reveal(along=tStamp) +\n  shadow_trail(distance = 0.01,\n               alpha = 0.5,\n               shape = 1)\nMy_animation\n\n\n\n\nOther arguments are:\ntransition_time use the information for the transition is labs shows the title with time so you can use as a reference\nshadow_wake is the wake behind the points read more here\n\n\n\nThe package animation allows to save the animation as a file\n\nlibrary(animation)\n\nTo export, you can save the animation as gif\n\n# anim_save(\"animation.gif\",My_animation)\n# beep(sound=1,expr=NULL)\n\nOr transform from gif to mp4 using the package av\n\nlibrary(av)\n\n\n# av::av_encode_video(\"animation.gif\", \n#                     framerate = 5 ,\n#                     output = 'animation.mp4')\n# beep(sound=1,expr=NULL)"
  },
  {
    "objectID": "blog/2023-07-13-custompoints/custompoints.html",
    "href": "blog/2023-07-13-custompoints/custompoints.html",
    "title": "Custom points in a map",
    "section": "",
    "text": "Customize your plot using different sizes, shapes and colors in the points of your figures."
  },
  {
    "objectID": "blog/2023-07-13-custompoints/custompoints.html#classify",
    "href": "blog/2023-07-13-custompoints/custompoints.html#classify",
    "title": "Custom points in a map",
    "section": "Classify",
    "text": "Classify\nBased on the range of the densities, define how many classes you want to use and where the cuts will be made.\n\nclass0<-0\nclass1<-1\nclass2<-2.5\nclass3<-5\n\nUsing the function mutate from the package tidyverse add a new column with a classification.\nNote that using alphanumerical order is important for the order in the legend.\n\nlibrary(tidyverse)\n\n\ndensity_df<-density_df %>% \n    mutate(density_class = case_when(\n      densities ==  class0 ~ as.character(\"group0\"),\n      densities >=  class0 & densities <=  class1 ~ as.character(\"group1\"),\n      densities >=  class1 & densities <=  class2 ~ as.character(\"group2\"),\n      densities >=  class2 & densities <=  class3 ~ as.character(\"group3\"),\n      densities >=  class3 ~ as.character(\"group4\"),\n      TRUE~\"U\"))\n\nCheck number of observations to make sure your classification was working and that you have at least one value per group.\n\ndensity_df %>%\n  group_by(density_class)%>%\n  tally()"
  },
  {
    "objectID": "blog/2023-07-13-custompoints/custompoints.html#base-plot",
    "href": "blog/2023-07-13-custompoints/custompoints.html#base-plot",
    "title": "Custom points in a map",
    "section": "Base plot",
    "text": "Base plot\nTo visualize your data, create a base plot with defined shape, size and labels.\nTo define the shape and size, the argument was added inside the aes.\nTo assign the values and labels, fill the arguments scale_shape_manual and scale_size_manual.\n\nggplot()+\n  geom_point(data=density_df,\n          aes(x = longitude,\n              y= latitude,\n              shape = density_class,\n              size= density_class),\n              fill= \"#d00000\")+\n  \n  scale_shape_manual(values = density_shapes,labels=density_labels)+\n  scale_size_manual(values =  density_sizes,labels=density_labels)"
  },
  {
    "objectID": "blog/2023-07-13-custompoints/custompoints.html#add-map",
    "href": "blog/2023-07-13-custompoints/custompoints.html#add-map",
    "title": "Custom points in a map",
    "section": "Add map",
    "text": "Add map\nSince we need reference map, the package sf contains the function geom_sf that allows plotting shapefiles, and the package GermanNorthSea contains shapefiles from the North Sea readily available for use.\nCall (or install) the packages\n\nlibrary(sf)\nlibrary(GermanNorthSea)\n\nSome parameters need to be adjusted first, such as which CRS to use, and the limits on the map.\nFor more details go to: Mapping in R and GermanNorthSea\nHere the parameters define that we are going to use CRS 4326, color the land in yellow and the water in blue, and define the coordinates to plot.\n\nmy_CRS<-4326\nEuropa<-sf::st_transform(German_land, my_CRS)\nEEZ<-sf::st_transform(German_EEZ, my_CRS)\ncolor_land='#f7bf54'\ncolor_water='#3668b4'\nxval<-c(3,9)\nyval<-c(53,56)\n\nCreate a base map.\n\nbase_plot<-ggplot2::ggplot()+\n    # maps\n    ggplot2::geom_sf(data = EEZ, colour = 'black', fill = color_water)+\n    ggplot2::geom_sf(data = Europa, colour = 'black', fill = color_land)+ \n    ggplot2::coord_sf(xlim = xval, ylim = yval)+\n\n    NULL\nbase_plot"
  },
  {
    "objectID": "blog/2023-07-13-custompoints/custompoints.html#add-dots",
    "href": "blog/2023-07-13-custompoints/custompoints.html#add-dots",
    "title": "Custom points in a map",
    "section": "Add dots",
    "text": "Add dots\nNow add the density data on top of the base map.\n\ndensity_wmap<-base_plot+\n  geom_point(data=density_df,\n          aes(x = longitude,\n              y= latitude,\n              shape = density_class,\n              size= density_class),\n              fill= \"#d00000\")+\n  \n  scale_shape_manual(values = density_shapes,labels=density_labels)+\n  scale_size_manual(values =  density_sizes,labels=density_labels)\ndensity_wmap\n\nNow you have a base map with density information on different shape and size."
  },
  {
    "objectID": "blog/2023-08-02-customlegend/customlegend.html",
    "href": "blog/2023-08-02-customlegend/customlegend.html",
    "title": "Custom legends in a map",
    "section": "",
    "text": "Customize the legend of your plot."
  },
  {
    "objectID": "blog/2023-08-02-customlegend/customlegend.html#add_legend",
    "href": "blog/2023-08-02-customlegend/customlegend.html#add_legend",
    "title": "Custom legends in a map",
    "section": "add_legend",
    "text": "add_legend\nI create this function to include the legend inside the plot, the function is available on the package seamonas.\nThe function removes the background of the legend making it transparent, and includes the legend inside the plot based on the coordinates provided.\n\nadd_legend<-function(plot_wbreaks=plot_wbreaks,\n                     legxy=legxy){\n  plot_wlegend<-plot_wbreaks+\n    ggplot2::theme(\n      legend.position = legxy,\n      legend.title = ggplot2::element_blank(),\n      legend.text= ggplot2::element_text(size=10,color=\"#343a40\",family='sans'),\n      legend.spacing.y =  ggplot2::unit(0.01, 'cm'),\n      legend.spacing.x =  ggplot2::unit(0.2, 'cm'),\n      legend.background = ggplot2::element_rect(fill='transparent',colour =\"transparent\"),\n      legend.box.background = ggplot2::element_rect(fill='transparent',colour =\"transparent\"),\n      legend.key = ggplot2::element_rect(fill = \"transparent\", colour = \"transparent\"),\n      legend.key.size =  ggplot2::unit(0.7, 'cm'))\n  return(plot_wlegend)\n}\n\nHere, the arguments inside legxy are referring to where the legend will appear.\n\ndensity_wlegend<-add_legend(\n  plot_wbreaks=density_wmap,\n  legxy=c(0.11, 0.21))\ndensity_wlegend\n\nTo add the title of the legend, I used the function annotate and a specific expression since I am using superscript.\n\ndensity_wlegend<-density_wlegend+\n  ggplot2::theme(legend.key.size = ggplot2::unit(0.4, \"cm\"))+\n  ggplot2::annotate(geom=\"text\",\n                      x=3.0, y=54.0,\n                      label=expression(atop(\"Density\"), paste(\"[ind/k\", m^2,\"]\")),\n                      color=\"#343a40\",hjust = 0)\n\ndensity_wlegend"
  },
  {
    "objectID": "blog/2023-08-02-customlegend/customlegend.html#add_theme",
    "href": "blog/2023-08-02-customlegend/customlegend.html#add_theme",
    "title": "Custom legends in a map",
    "section": "add_theme",
    "text": "add_theme\nThis function changes the x and y axis legends to Capitalized words and includes the symbol of degree on the plot. Removes the gray background and adds a white line on the panel border. It is also available in the package seamonas, but I am including it here in case you want to customize it.\n\nadd_theme<-function(plot_wlegend=plot_wlegend){\n\n  plot_wtheme<-plot_wlegend+\n    ggplot2::xlab('Longitude')+\n    ggplot2::ylab('Latitude')+\n    ggplot2::scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n    ggplot2::scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\"))+\n    ggplot2::theme(\n      panel.border = ggplot2::element_rect(colour = \"black\", fill=NA, linewidth = 1),\n      panel.grid.major = ggplot2::element_blank(),\n      panel.grid.minor = ggplot2::element_blank(),\n      panel.background = ggplot2::element_blank())\n  return(plot_wtheme)\n}\n\nTo run the function just add your plot.\n\ndensity_wtheme<-add_theme(plot_wlegend = density_wlegend)\ndensity_wtheme\n\nYou can theoretically use the function add_theme with any other map."
  },
  {
    "objectID": "blog/2023-09-01-patchwork-legend/custom-legend.html",
    "href": "blog/2023-09-01-patchwork-legend/custom-legend.html",
    "title": "Reference legend multiplots",
    "section": "",
    "text": "For this example, we will use the data provided in the package sula  The data is from tracked masked boobies at Rapa Nui  The data is already in tidy format \n\nmy_data<-(sula::GPS_preparado)"
  },
  {
    "objectID": "blog/2023-09-01-patchwork-legend/custom-legend.html#grid",
    "href": "blog/2023-09-01-patchwork-legend/custom-legend.html#grid",
    "title": "Reference legend multiplots",
    "section": "Grid",
    "text": "Grid\nThe steps on this parts are on “how to create grid”\nPackages to use:\n\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(ggplot2)\n\nRun to create a reference grid.\n\nmy_points<-my_data %>%\n  st_as_sf(coords=c('Longitude','Latitude'),\n           crs=4326,\n           remove=FALSE)\n\nmy_grid<-st_make_grid(my_points, \n                       c(0.05, 0.05), \n                       what = \"polygons\",\n                       square = TRUE)\n\nmy_grid_sf = st_sf(my_grid) %>%\n  mutate(grid_id = 1:length(lengths(my_grid)))\n\nmy_grid_sf$nlocs <- lengths(st_intersects(my_grid_sf, \n                                          my_points))\n\nFor the exercices, we want to create plots per individual.\nSo lets first check the name of the individuals.\n\nunique(my_data$IDs)\n\nTo count number of locations per grid and add it as a column in the original grid functions from the package tidyverse can be used.\n\nGPS01_subset<- my_data %>%\n  filter(IDs=='GPS01')\n\nGPS01_sf<-GPS01_subset %>%\n  st_as_sf(coords=c('Longitude','Latitude'),\n           crs=4326,\n           remove=FALSE)\n\nmy_grid_sf$GPS01_nlocs<- lengths(st_intersects(my_grid_sf, \n                                          GPS01_sf))\n\n\nGPS02_subset<- my_data %>%\n  filter(IDs=='GPS02')\n\nGPS02_sf<-GPS02_subset %>%\n  st_as_sf(coords=c('Longitude','Latitude'),\n           crs=4326,\n           remove=FALSE)\n\nmy_grid_sf$GPS02_nlocs<- lengths(st_intersects(my_grid_sf, \n                                          GPS02_sf))"
  },
  {
    "objectID": "blog/2023-09-01-patchwork-legend/custom-legend.html#custom-palette",
    "href": "blog/2023-09-01-patchwork-legend/custom-legend.html#custom-palette",
    "title": "Reference legend multiplots",
    "section": "Custom palette",
    "text": "Custom palette\nNow to create a plot, lets select your palette based on the number of locations.\n\nrange(my_grid_sf$GPS01_nlocs)\nrange(my_grid_sf$GPS02_nlocs)\n\nBecause the palette is between 0 and 16, we will manually create the palette using characters.\n\nmy_palette <- c(\"1\" = \"#FFCF70\",\n                \"2\" = \"#FFC242\",\n                \"3\" = \"#FFBE33\",\n                \"4\" = \"#F5A300\",\n                \"5\" = \"#FD9A21\",\n                \"6\" = \"#FA8C02\",\n                \"7\" = \"#FF740A\",\n                \"8\" = \"#F56A00\",\n                \"9\" = \"#CEA7EE\",\n                \"10\" = \"#C698EB\",\n                \"11\" = \"#B376E5\",\n                \"12\" = \"#9D4EDD\",\n                \"13\" = \"#9643DB\",\n                \"14\" = \"#72369D\",\n                \"15\" = \"#6E3498\",\n                \"16\" = \"#3B194D\")\n\nTo create the plot:\n1. Subset only to grids with data\n2. Convert the locations into character\n3. Add palette in scale_fill_manual\n4. Remove legend\n\nGPS01_plot<-ggplot()+\n  geom_sf(data=subset(my_grid_sf,GPS01_nlocs != 0),\n                      aes(fill=as.character(GPS01_nlocs)))+\n  theme_bw()+\n  scale_fill_manual(name = \"no.locs\",values = my_palette)+\n  theme(legend.position = 'none')+\n  coord_sf(xlim = c(-110, -108),ylim = c(-28, -26))+  \n  scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n  scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\"))\nGPS01_plot\n\n\nGPS02_plot<-ggplot()+\n  geom_sf(data=subset(my_grid_sf,GPS02_nlocs != 0),\n                      aes(fill=as.character(GPS02_nlocs)))+\n  theme_bw()+\n  scale_fill_manual(name = \"no.locs\",values = my_palette)+\n  theme(legend.position = 'none')+\n  coord_sf(xlim = c(-110, -108),ylim = c(-28, -26))+  \n  scale_x_continuous(labels = function(x) paste0(x, '\\u00B0', \"W\")) +\n  scale_y_continuous(labels = function(x) paste0(x, '\\u00B0', \"N\"))\nGPS02_plot"
  },
  {
    "objectID": "blog/2023-10-02-inside-legend/inside-legend.html",
    "href": "blog/2023-10-02-inside-legend/inside-legend.html",
    "title": "Inside legend",
    "section": "",
    "text": "For this example, we will use the data provided in the package sula  The data is from tracked masked boobies at Rapa Nui  The data is already in tidy format \n\nmy_data<-(sula::GPS_preparado)\n\n\ncolor1<-'#ff595e'\ncolor2<-'#ff924c'\ncolor3<-'#ffca3a'\ncolor4<-'#8ac926'\ncolor5<-'#52a675'\ncolor6<-'#1982c4'\ncolor7<-'#4267ac'\ncolor8<-'#6a4c93'"
  },
  {
    "objectID": "blog/2023-10-02-inside-legend/inside-legend.html#inside-legend",
    "href": "blog/2023-10-02-inside-legend/inside-legend.html#inside-legend",
    "title": "Inside legend",
    "section": "Inside legend",
    "text": "Inside legend\nSelect the coordinates for the legend\n\nlegx<- -109.90\nlegy<- -27.4\n\nAdd text\n\nmy_plot_wtext<-my_plot + \n\n  annotate(geom=\"text\",x= legx, y=legy-0.1, label=\"GPS01\",color=\"#343a40\",hjust = 0, size=2)+\n  annotate(geom=\"text\",x= legx, y=legy-0.15, label=\"GPS02\",color=\"#343a40\",hjust = 0, size=2)+\n  annotate(geom=\"text\",x= legx, y=legy-0.2, label=\"GPS03\",color=\"#343a40\",hjust = 0, size=2)+\n  annotate(geom=\"text\",x= legx, y=legy-0.25, label=\"GPs04\",color=\"#343a40\",hjust = 0, size=2)+\n  annotate(geom=\"text\",x= legx, y=legy-0.3, label=\"GPS05\",color=\"#343a40\",hjust = 0, size=2)+\n  annotate(geom=\"text\",x= legx, y=legy-0.35, label=\"GPS06\",color=\"#343a40\",hjust = 0, size=2)\nmy_plot_wtext\n\nAdd segment\n\nmy_plot_wtext +\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.1, yend = legy-0.1,color = color1,linewidth=1)+\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.15, yend = legy-0.15,color = color2,linewidth=1)+\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.2, yend = legy-0.2,color = color3,linewidth=1)+\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.25, yend = legy-0.25,color = color4,linewidth=1)+\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.3, yend = legy-0.3,color = color5,linewidth=1)+\n  annotate(\"segment\", x = legx-0.01, xend = legx-0.04, y = legy-0.35, yend = legy-0.35,color = color6,linewidth=1)\n\nAdd rectangle\n\nmy_plot_wtext +\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.09, ymax = legy-0.12,color = color1,linewidth=1, fill=\"transparent\")+\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.14, ymax = legy-0.17,color = color2,linewidth=1, fill=\"transparent\")+\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.19, ymax = legy-0.22,color = color3,linewidth=1, fill=\"transparent\")+\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.24, ymax = legy-0.27,color = color4,linewidth=1, fill=\"transparent\")+\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.29, ymax = legy-0.32,color = color5,linewidth=1, fill=\"transparent\")+\n  annotate(\"rect\", xmin = legx-0.01, xmax = legx+0.08, ymin = legy-0.34, ymax = legy-0.37,color = color6,linewidth=1, fill=\"transparent\")\n\nYou can of course use the legend, but this option is for me more easy to custom and move around the plot. Moreover, it allows you to include all kinds of annotations inside the plot."
  },
  {
    "objectID": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html",
    "href": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html",
    "title": "secondary x title",
    "section": "",
    "text": "This post is to show how to create a secondary x title in a ggplot"
  },
  {
    "objectID": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#theme",
    "href": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#theme",
    "title": "secondary x title",
    "section": "Theme",
    "text": "Theme\nNow lets remove the legend and the title of the x axis.\nLets also replace the text in the x axis.\n\nplot_b<-plot_a+\n  theme(legend.position = \"none\",\n        axis.title.x = element_blank())+\n  scale_x_discrete(labels=  c(\"F\", \"M\", \"F\", \"M\"))\nplot_b"
  },
  {
    "objectID": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#increase-coord",
    "href": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#increase-coord",
    "title": "secondary x title",
    "section": "Increase coord",
    "text": "Increase coord\nNow, the purpose of the exercise is to add a secondary axis.\nTo do this, we will expand the space on the y axis.\nBy doing so we will have more space for the secondary text. Note that it might be difficult to see at first grasp, but there is some empty space.\nThe arguments to increase the space are:\n- coord_cartesian and clip off\n- considering the y limit\n- change the plot.margin\n\nplot_c<-plot_b+\n  coord_cartesian(clip = \"off\",ylim = c(10, 80))+\n  scale_y_continuous(breaks=c(20,40,60,80), \n                     limits=c(-10,80))+\n  theme(plot.margin=unit(c(0,0.1,2,0.2),\"cm\"))\nplot_c"
  },
  {
    "objectID": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#add-segments-and-text",
    "href": "blog/2023-11-02-secondaryxtitle/secondaryxtitle.html#add-segments-and-text",
    "title": "secondary x title",
    "section": "Add segments and text",
    "text": "Add segments and text\nNow in the space created under the y axis, we can add the subtitles using the annotation arguments.\n\nplot_c+\n  annotate(geom = \"text\",x = 1.5,y = -5, label = \"Group 1\",size = 4)+\n  annotate(\"segment\",y = 0, yend = 0,x = 1, xend = 2,colour = \"black\")+\n  \n  annotate(geom = \"text\",x = 3.5,y = -5, label = \"Group 2\",size = 4)+\n  annotate(\"segment\",y = 0, yend = 0,x = 3, xend = 4,colour = \"black\")\n\nThat was it, I hope it helps :)"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html",
    "href": "blog/2023-12-04-arrows/arrows.html",
    "title": "using arrows",
    "section": "",
    "text": "This post is to create a plot that has arrows indicating the direction\nIn the example, we use sample data, but if you know where you event starts and ends you can skip these steps and go directly to the final section."
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#calculate-gaps",
    "href": "blog/2023-12-04-arrows/arrows.html#calculate-gaps",
    "title": "using arrows",
    "section": "Calculate gaps",
    "text": "Calculate gaps\nUsing the information from time, we will check when there were gaps and based on where a gap was, identify different events\nLoad tidyverse package to use some functions\n\nlibrary(tidyverse)\n\nCheck that your time data is in the correct format\n\nsurvey_data$dt <- as.POSIXct(strptime(survey_data$timestamps, \"%Y-%m-%d %H:%M:%S\"))\n\nThis function uses the times to identify where there was a gap, assuming that the data is sorted\n\ncalculate_gaps<-function(my_data=my_data){\n  time1<-my_data$dt\n  time2<-lag(time1)\n  time_dif<-as.numeric(difftime(time1,time2, units=\"mins\"))\n  my_data$time_dif<-as.numeric(time_dif)\n  return(my_data)\n}\n\nAfter running the function, a new data frame will be created which includes a column named time_dif\n\nsurvey_data_gaps<-calculate_gaps(survey_data)\n\nHere we will define, how many minutes should be considered a gap\n\nsurvey_data_gaps<-survey_data_gaps %>%\n  mutate(gap_event = case_when(is.na(time_dif) ~ 'N',\n                                time_dif >= 2 ~ 'Y',\n                                TRUE ~ 'N'))"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#identify-events",
    "href": "blog/2023-12-04-arrows/arrows.html#identify-events",
    "title": "using arrows",
    "section": "Identify events",
    "text": "Identify events\nTo add a number to each event in order to be able to identify them separately, we use the following function\n\nidentify_events<-function(my_data=my_data){\n  num_seq<-nrow(my_data)\n  num_seq<-as.numeric(num_seq)\n  my_data$num_seq<-as.numeric(paste(seq(1:num_seq)))\n  subset_data<-subset(my_data,my_data$gap_event != \"Y\")\n  subset_data$num_seq<-as.integer(subset_data$num_seq)\n  subset_data$event_number<-(cumsum(c(1L, diff(subset_data$num_seq)) != 1L))\n  subset_data$event_number<-subset_data$event_number+1\n  subset_data$event_number<-stringr::str_pad(subset_data$event_number, 3, pad = \"0\")\n  subset_data$event_number<-paste0(\"event_\",subset_data$event_number)\n  subset_data<-subset_data%>%select(num_seq,event_number)\n  my_data_events<-full_join(my_data,subset_data,by='num_seq')\nreturn(my_data_events)\n}\n\nThe function will return a data frame with a new column called event_number\n\nsurvey_data_events<-identify_events(my_data=survey_data_gaps)"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#start-and-time-of-the-events",
    "href": "blog/2023-12-04-arrows/arrows.html#start-and-time-of-the-events",
    "title": "using arrows",
    "section": "Start and time of the events",
    "text": "Start and time of the events\nUsing the classification of the events, we will extract the first and the last location per event, which would become the start and end of the arrow on the plot\n\nsurvey_time_events<-survey_data_events %>%\n  group_by(event_number)%>%\n  summarise(first_lat=first(latitude),\n            last_lat=last(latitude),\n            first_lon=first(longitude),\n            last_lon=last(longitude))%>%\n  drop_na()"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#plot",
    "href": "blog/2023-12-04-arrows/arrows.html#plot",
    "title": "using arrows",
    "section": "Plot",
    "text": "Plot\nTo plot we use the function geom_segment and the additional argument arrow\n\nggplot(survey_time_events,\n       aes(x = first_lon, y = first_lat)) +\n  geom_segment(aes(xend = last_lon, yend = last_lat), arrow = arrow())"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#group-by-event",
    "href": "blog/2023-12-04-arrows/arrows.html#group-by-event",
    "title": "using arrows",
    "section": "Group by event",
    "text": "Group by event\nUse the function group_by and summarise to identify the start and end of the events, now with the rescaling there would be more events\n\nsurvey_rescale_arrows<-survey_rescale %>%\n  group_by(event_number2)%>%\n  summarise(first_lat=first(latitude),\n            last_lat=last(latitude),\n            first_lon=first(longitude),\n            last_lon=last(longitude))%>%\n  drop_na()\n\nSimilarly to above we use the function geom_segment and the argument arrow\n\nggplot(survey_rescale_arrows,\n       aes(x = first_lon, y = first_lat)) +\n  geom_segment(aes(xend = last_lon, yend = last_lat), \n               arrow = arrow())"
  },
  {
    "objectID": "blog/2023-12-04-arrows/arrows.html#further-reading",
    "href": "blog/2023-12-04-arrows/arrows.html#further-reading",
    "title": "using arrows",
    "section": "Further reading",
    "text": "Further reading\nTo change the shape, size and form of the arrow visit geom_segment"
  },
  {
    "objectID": "blog/2024-01-15-calendar/calendar.html",
    "href": "blog/2024-01-15-calendar/calendar.html",
    "title": "Create a calendar",
    "section": "",
    "text": "Intro\nThis post is to create a calendar to check when some events were more likely to occur.\n\n\nPackages\n\nlibrary(tidyverse)\n\n\n\nData\nCreate a data frame with a sequence of days\n\nfirstday<- as.Date(\"2020-05-01\")\nlastday <- as.Date(\"2020-08-31\")\ndays_seq <- seq(firstday, lastday, by = \"day\")\ndays_df<-as.data.frame(days_seq)\n\nSeparate months and days\n\ndays_df$month<-substr(days_df$days, start = 6, stop = 7)\ndays_df$day<-substr(days_df$days, start = 9, stop = 10)\n\nAdd values\n\nmy_values<-sample(1:7, 123, replace=TRUE)\ndays_df$events<-as.factor(my_values[1:123])\n\nSeparate months\n\nmay<-days_df %>%\n  filter(month=='05')\n\nCreate x and y axis\n\ncalen_xs<-rep(c(1:7), times = 5)\ncalen_ys<-rep(c(5:1), each = 7)\n\n\nmay$calen_xs<-calen_xs[1:31]\nmay$calen_ys<-calen_ys[1:31]\n\nSelect color palette\n\nmy_palette <- c(\"1\" = '#577590', \n                \"2\" = '#43aa8b', \n                \"3\" = '#90be6d', \n                \"4\" = \"#f9c74f\", \n                \"5\" = \"#f8961e\", \n                \"6\" = \"#f3722c\", \n                \"7\" = \"#f94144\") \n\n\n\nPlot\n\nggplot(may,aes(x=calen_xs,y=calen_ys,color=events))+\n  geom_point(size=25,shape=15)+\n\n  scale_x_continuous(limits=c(0.5,7.5))+\n  scale_y_continuous(limits=c(0.5,5.5))+\n  \n  # remove background colors\n  theme_void()+\n  \n  # adds texts\n  geom_text(aes(label=day),color='white') +\n  \n  # sets the legend below\n  theme(legend.position = 'top')+\n   \n  # lines the legend\n  guides(colour = guide_legend(override.aes = list(size=6),nrow = 1))+\n  \n  # uses palette\n  scale_color_manual(name = \"May no. events\",values = my_palette)\n\n\n\n\n\n\n\n\nThats it!"
  },
  {
    "objectID": "blog/2024-02-06-environmentalvariables/environmentalvariables.html",
    "href": "blog/2024-02-06-environmentalvariables/environmentalvariables.html",
    "title": "Environmental variables",
    "section": "",
    "text": "This post is to create a map with environmental variables.\n\nIdentify the data you want to download\nDownload data from the server\nCreate a basic map with the values"
  },
  {
    "objectID": "blog/2024-02-06-environmentalvariables/environmentalvariables.html#load-data",
    "href": "blog/2024-02-06-environmentalvariables/environmentalvariables.html#load-data",
    "title": "Environmental variables",
    "section": "Load data",
    "text": "Load data\nLoad the package rerddap\n\nlibrary(\"rerddap\")\n\nCheck the list of available servers.\nFor the example, we are interested in the Pacific Ocean, therefore I would use NOAA.\n\nservers()\n\nI want to download sea surface temperature (SST) data, therefore I will use erdMH1sstdmday\n\nsstInfo <- info('erdMH1sstdmday')\n\nTo check the specifications use browse\n\nbrowse('erdMH1sstdmday') \n\nIt takes some time to download.\n\nSST03.2017<-griddap(sstInfo, latitude = c(ylim1, ylim2), longitude = c(xlim1, xlim2), time = c(time1,time2), fields = 'sst')\n\nTo use ggplot, the format in dataframe works better.\n\nSST03.2017dt<-SST03.2017$data\n\nClear NaNs\n\nlibrary(tidyverse)\n\n\nSST03.2017dt_clean<-SST03.2017dt %>%\n  filter(sst!='NaN')\n\nCreate plot\n\nggplot(SST03.2017dt_clean) +\n geom_raster(aes(x=lon, y=lat, fill = sst))+ \n  scale_fill_viridis_c(option = \"H\")"
  },
  {
    "objectID": "blog/2024-02-06-environmentalvariables/environmentalvariables.html#add-land-for-reference",
    "href": "blog/2024-02-06-environmentalvariables/environmentalvariables.html#add-land-for-reference",
    "title": "Environmental variables",
    "section": "Add land for reference",
    "text": "Add land for reference\nLoad the package rworldmap this includes shapefiles of countries\n\nlibrary(rworldmap)\n\nThe function getMap() loads the map in your environment\n\nworldMap <- getMap()\n\nLoad the package tidyverse\nUse the function fortify to be able to plot the map using ggplot\n\nworld.points <- fortify(worldMap)\n\nTo plot using ggplot a data frame is recommended\n\nworld.points$region <- world.points$id\nworld.df <- world.points[,c(\"long\",\"lat\",\"group\", \"region\")]\n\nCreate plot using ggplot\n\nggplot(SST03.2017dt) +\n  geom_raster(aes(x=lon, y=lat, fill = sst))+\n  geom_polygon(data = world.df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = \"#e5e5e5\") +\n  theme(\n    axis.title = element_blank(),\n    panel.border = element_rect(colour = \"#495057\", fill=NA, size=1),\n    panel.grid = element_blank(), \n    panel.spacing = unit(0, \"lines\"), \n    plot.background = element_blank())+\n    coord_sf(xlim = c(xlim1+2,xlim2-2), \n             ylim = c(ylim1+2,ylim2-2))+ \n  scale_fill_viridis_c(option = \"H\")\n\n\n\n\n\n\n[1] \"C:/Users/lerma/OneDrive/Documents/03Academico/02Proyectos-Postdoc/2025/1Programming/1Quarto/quarto_webpage/blog/2024-02-06/environmental_export.jpg\""
  },
  {
    "objectID": "blog/2024-03-11-year-sst/year-sst.html",
    "href": "blog/2024-03-11-year-sst/year-sst.html",
    "title": "Secondary-axis environmental plot",
    "section": "",
    "text": "This post is to create a plot with environmental variables, in one axis the sea surface temperature and in the other axis the chlorophyll-a concentration.\n\nDownload data from the server\nCalculate average values\nCreate a secondary-axis plot with the values"
  },
  {
    "objectID": "blog/2024-03-11-year-sst/year-sst.html#add-legend",
    "href": "blog/2024-03-11-year-sst/year-sst.html#add-legend",
    "title": "Secondary-axis environmental plot",
    "section": "Add legend",
    "text": "Add legend\nUsing annotate the legend would be included inside the plot.\n\nplot_SST_wlegend<-plot_SST+\n  annotate(\"text\", x = c(1.9), y = c(34), label = c(\"SST\") , color=\"black\", size=5)+ \n  annotate(\"segment\", x = 1.0, xend = 1.4, y = 34, yend = 34, colour = \"red\", size=1, alpha=1)+\n  \n  annotate(\"text\", x = c(1.9), y = c(32), label = c(\"CHL\") , color=\"black\", size=5)+ \n  annotate(\"segment\", x = 1.0, xend = 1.4, y = 32, yend = 32, colour = \"blue\", size=1, alpha=1)+\n  NULL\nplot_SST_wlegend"
  },
  {
    "objectID": "blog/2024-04-04-buffer/buffer.html",
    "href": "blog/2024-04-04-buffer/buffer.html",
    "title": "Create a buffer",
    "section": "",
    "text": "In this blog, a buffer subsetting environmental data would be created and the average values within the buffer calculated."
  },
  {
    "objectID": "blog/2024-04-04-buffer/buffer.html#map",
    "href": "blog/2024-04-04-buffer/buffer.html#map",
    "title": "Create a buffer",
    "section": "Map",
    "text": "Map\nCheck data downloaded using ggplot.\n\nlibrary(ggplot2)\n\nDownload data from land from the package rworldmap.\n\nlibrary(rworldmap)\n\nThe function getMap() loads the map in your environment.\n\nworld_map <- getMap()\n\nTo plot using ggplot a data frame is recommended. Use the function fortify to be able to get the data in a data frame format.\n\nworld_points <- fortify(world_map)\nworld_points$region <- world_points$id\nworld_df <-world_points[,c(\"long\",\"lat\",\"group\", \"region\")]\n\n\nggplot() +\n geom_raster(data=SST_dfclean,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = \"H\")+\n geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = \"#e5e5e5\") +\n coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))"
  },
  {
    "objectID": "blog/2024-04-04-buffer/buffer.html#map-1",
    "href": "blog/2024-04-04-buffer/buffer.html#map-1",
    "title": "Create a buffer",
    "section": "Map",
    "text": "Map\nUse ggplot to create the map.\nUse the functions geom_raster to plot the SST data.\nThe function geom_polygon to plot the base maps data.\nThe function geom_polygon to plot the buffer.\nAdjust to your corresponding area on the coord_sf.\n\nggplot() +\n geom_raster(data=SST_dfclean,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = \"H\")+\n geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = \"#e5e5e5\") +\n geom_sf(data = This_buffer, \n          color = \"black\", \n          fill = NA,  # equivalent to 'transparent'\n          linetype = \"dashed\")+\n geom_point(data=This_point, aes(x=Longitude, y=Latitude), colour = \"black\", size = 4)+\n coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))"
  },
  {
    "objectID": "blog/2024-04-04-buffer/buffer.html#subset",
    "href": "blog/2024-04-04-buffer/buffer.html#subset",
    "title": "Create a buffer",
    "section": "Subset",
    "text": "Subset\nTo plot the SST data, select the information from the new data frame SST_inside and the function geom_raster to plot the information.\n\nggplot() +\n  geom_raster(data=SST_inside,aes(x=longitude, y=latitude, fill = sst))+ scale_fill_viridis_c(option = \"H\")+\n  geom_polygon(data = world_df, aes(x = long, y = lat, group = group), colour = '#403d39', fill = \"#e5e5e5\") +\n  \n  geom_sf(data = This_buffer, \n          color = \"black\", \n          fill = NA,  # equivalent to 'transparent'\n          linetype = \"dashed\")+\n  geom_point(data=This_point, aes(x=Longitude, y=Latitude), colour = \"black\", size = 4)+\n  theme(panel.background = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill='transparent'))+\n  coord_sf(xlim = c(-109.7,-109.1),ylim = c(24.6,25.2))+ \n  NULL\n\nUse the values inside the buffer to calculate the average SST\n\nmean(SST_inside$sst)\nsd(SST_inside$sst)\n\n\n\n\n\n\n\n\n\nEnd of document"
  },
  {
    "objectID": "blog/2024-05-02-imagesforpublication/imagesforpublication.html",
    "href": "blog/2024-05-02-imagesforpublication/imagesforpublication.html",
    "title": "Using magick for image manipulation",
    "section": "",
    "text": "This post is to read and edit images in R.\nUsing R assures that your image would not be compress as happens when you open it with some other programs.\nThe blog consist of two parts:\n1. Add letter to a picture and export\n2. Merge two pictures into one and export\n\n\n\n\nUse the package magick to process images in R.\nFor more information: https://docs.ropensci.org/magick/articles/intro.html#read-and-write\nTo install the package\n\ninstall.packages(\"magick\")\n\nTo call the package\n\nlibrary(magick)\n\nWarning: package 'magick' was built under R version 4.4.3\n\n\nLinking to ImageMagick 6.9.12.98\nEnabled features: cairo, freetype, fftw, ghostscript, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fontconfig, x11\n\n\n\n\n\nSelect your directory. In the example, as My_directory.\n\nlibrary(here)\nMy_directory<-here()\n\n\n\n\nCheck if you gave the correct path by using the function list.files.\nIt should show the images you want to use.\nRead images using the function image_read.\n\nFig1_original<- image_read(Fig1_link)\n\nThe function image_draw will show the picture in the Viewer.\nMoreover, it gives information on the width and height of the picture.\n\nFig1_draw<-image_draw(Fig1_original)\nFig1_draw\n\n\n\n\n\nTo add text use the function image_annotate\nTo add the text in the right bottom use the information from the dimensions above to define the xaxis and yaxis.\n\nFig1_text<-image_annotate(Fig1_draw, \"(a)\",  location = \"+1199+999\", font = 'Arial', size = 100, color='white')\n\n\n\nhere() starts at C:/Users/lerma/OneDrive/Documents/03Academico/02Proyectos-Postdoc/2025/1Programming/1Quarto/quarto_webpage\n\n\n\n\n\n\n\n\nTo add the text in the left top part you can use define the xaxis and yaxis as 100.\n\nFig1_text<-image_annotate(Fig1_draw, \"(a)\",  location = \"+50+50\", font = 'Arial', size = 100, color='white')\n\n\n\n\n\n\n\n\n\n\nUse the function image_write to export.\n\nimage_write(Fig1_text, path = paste0(My_directory,\"/Fig1_tl.png\"), format = \"png\")"
  },
  {
    "objectID": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#add-border",
    "href": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#add-border",
    "title": "Using magick for image manipulation",
    "section": "Add border",
    "text": "Add border\nUse the function image_border to add some space between the pictures.\n\nFig1_border<-image_border(image_background(Fig1_text, \"transparent\"), \"white\", \"40x10\")\nFig1_border\n\n\nFig2_border<-image_border(image_background(Fig2_text, \"transparent\"), \"white\", \"40x10\")\nFig2_border"
  },
  {
    "objectID": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#combine",
    "href": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#combine",
    "title": "Using magick for image manipulation",
    "section": "Combine",
    "text": "Combine\nUse the function image_append to have both pictures side by side.\n\nimage_append(c(Fig1_border,Fig2_border))"
  },
  {
    "objectID": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#export-1",
    "href": "blog/2024-05-02-imagesforpublication/imagesforpublication.html#export-1",
    "title": "Using magick for image manipulation",
    "section": "Export",
    "text": "Export\nUse the function image_write to export the picture.\n\n\n\n\nimage_write(image_append(c(Fig1_border,Fig2_border)), path = paste0(My_directory,\"/Fig1_append.png\"), format = \"png\")"
  },
  {
    "objectID": "blog/2024-06-04-pointsdistance/pointsdistance.html",
    "href": "blog/2024-06-04-pointsdistance/pointsdistance.html",
    "title": "Distance from point",
    "section": "",
    "text": "This post is about how to calculate distance from a point"
  },
  {
    "objectID": "blog/2024-06-04-pointsdistance/pointsdistance.html#plot-with-curves",
    "href": "blog/2024-06-04-pointsdistance/pointsdistance.html#plot-with-curves",
    "title": "Distance from point",
    "section": "Plot with curves",
    "text": "Plot with curves\nAdd the reference point to be able to plot\n\ncolonies_sub$reference_long<-reference$lon\ncolonies_sub$reference_lat<-reference$lat\n\nUse the function geom_curve to create lines between the reference point and the other points.\n\ncurves_plot<-base_plot+\n  geom_curve(data= subset(colonies_sub,colonies_sub$name != 'Helgoland'),\n             aes(x = reference_long, y = reference_lat, \n                 xend = colony_long, yend = colony_lat),  \n                 color = '#faa307',\n                 curvature = 0.05, alpha = 0.5)\ncurves_plot\n\nAdd the other points using geom_point\n\npoints_plot<-curves_plot+\n  geom_point(data=colonies_sub,\n             aes(x = colony_long,y= colony_lat), \n             color='#faa307', fill='#ffba08',shape=16,size=2,stroke=1.5)+\n  \n    geom_point(data=reference,\n             aes(x = long,y= lat), \n             color='#ff5400', fill='#ff5400',shape=16,size=4,stroke=1.5)\npoints_plot\n\n\nletters_plot<-points_plot+\n  annotate(\"text\", y = 54.15-0.21, x = -0.17+2.5, \n           label = \"Bempton Cliff \\n (525 km)\",\n           size=3.5,color='#0d3b66')+\n  annotate(\"text\", y = 56.08-0.21, x = -2.64+2.5, \n           label = \"Bass Rock \\n (701 km)\",\n           size=3.5,color='#0d3b66')+\n  annotate(\"text\", y = 57.69-0.21, x = -2.29+2.0, \n           label = \"Troup Head \\n (523 km)\",\n           size=3.5,color='#0d3b66')+\n  annotate(\"text\", y = 54.18-0.21, x = 7.89-1.9, \n           label = \"Helgoland \\n\",\n           size=3.5,color='red')+\nNULL\nletters_plot"
  },
  {
    "objectID": "blog/2024-07-05-interpolate/interpolate.html",
    "href": "blog/2024-07-05-interpolate/interpolate.html",
    "title": "Interpolate a path",
    "section": "",
    "text": "This post is about how to linear interpolate points from a trip"
  },
  {
    "objectID": "blog/2024-07-05-interpolate/interpolate.html#interpolate-to-1-minute",
    "href": "blog/2024-07-05-interpolate/interpolate.html#interpolate-to-1-minute",
    "title": "Interpolate a path",
    "section": "Interpolate to 1 minute",
    "text": "Interpolate to 1 minute\n\nID01_interpolated1m<-interpolate_trips(GPS_data=ID01_track,\n                                     interval='60 sec',\n                                     column_date='DateGMT',\n                                     column_time='TimeGMT',\n                                     column_trip='trip_number',\n                                     column_lat='Latitude',\n                                     column_lon='Longitude',\n                                     datetime_format<-\"%d/%m/%Y %H:%M:%S\")\n\nYou can see that after the function you have more data points.\nThis is because the original data was collected every 5 minutes, and the interpolation added locations every one minute.\n\nnrow(ID01_track)\nnrow(ID01_interpolated1m)\n\nPlot the interpolated data set to see the difference.\n\nInterpolated_1m<-ggplot(ID01_interpolated1m, aes(x=Longitude, y=Latitude, color=trip_number)) + \n  geom_point()+\n  ggtitle('Interpolated to 1 min')+\n  theme_bw()+\n  theme(legend.position='none')+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )+\n  geom_point(data=ID01_nest,aes(x = Longitude,y= Latitude), \n             color=\"black\", fill=\"black\",shape=16,size=5,stroke=1.5)\nInterpolated_1m"
  },
  {
    "objectID": "blog/2024-07-05-interpolate/interpolate.html#interpolate-to-15-minutes",
    "href": "blog/2024-07-05-interpolate/interpolate.html#interpolate-to-15-minutes",
    "title": "Interpolate a path",
    "section": "Interpolate to 15 minutes",
    "text": "Interpolate to 15 minutes\nTo interpolate to 15 minutes, change the interval to 900 sec.\n\nID01_interpolated15m<-interpolate_trips(GPS_data=ID01_track,\n                                     column_trip='trip_number',\n                                     column_lat='Latitude',\n                                     column_lon='Longitude',\n                                     column_date='DateGMT',\n                                     column_time='TimeGMT',\n                                     datetime_format<-\"%d/%m/%Y %H:%M:%S\",\n                                     interval='900 sec')\n\nYou can see that after the function you have less data points.\nThis is because the original data was collected every 5 minutes, and the interpolation added locations every 15 minutes.\n\nnrow(ID01_track)\nnrow(ID01_interpolated15m)\n\nPlot to see the difference.\n\nInterpolated_15m<-ggplot(ID01_interpolated15m, aes(x=Longitude, y=Latitude, color=trip_number)) + \n  geom_point()+\n  theme_bw()+\n  ggtitle('Interpolated to 15 mins')+\n  theme_bw()+\n  theme(legend.position='none')+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )+\n  geom_point(data=ID01_nest,aes(x = Longitude,y= Latitude), \n             color=\"black\", fill=\"black\",shape=16,size=5,stroke=1.5)\nInterpolated_15m"
  },
  {
    "objectID": "blog/2024-08-01-removelocs/removelocs.html",
    "href": "blog/2024-08-01-removelocs/removelocs.html",
    "title": "Remove undesired locations",
    "section": "",
    "text": "Intro\nWhen studying animals using GPSs, we often need to remove their central location. Here, I am sharing a function I created to eliminate all the locations within an area.\n\n\nData\nFor the exercises, test data is from masked boobies.  To access the data you have to install the package sula: devtools::install_github(“MiriamLL/sula”)\n\n#devtools::install_github(\"MiriamLL/sula\")\nlibrary(sula)\n\nThis data frame contains data from 10 individuals.\n\nunique(sula::GPS_raw$IDs)\n\nTo load it into the environment.\n\nGPS_ten<-GPS_raw\n\nPlot your data\n\nlibrary(tidyverse)\n\nHere you can see all the recorded locations using the GPSs.\n\nOriginal_plot<-ggplot()+\n  geom_point(data = GPS_ten,\n            aes(x=Longitude,y = Latitude),color='red', size=0.5)+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )\nOriginal_plot\n\n\n\nCreate a buffer\nSelect a location\n\nThis_point<-data.frame(Longitude=-109.5,Latitude=-27.2)\n\nCreate a buffer\nI created this function to create a buffer around a point\n\ncreate_buffer<-function(central_point=central_point, buffer_km=buffer_km){\n  central_spatial<- sp::SpatialPoints(cbind(central_point$Longitude,central_point$Latitude)) \n  sp::proj4string(central_spatial)= sp::CRS(\"+init=epsg:4326\") \n  central_spatial <- sp::spTransform(central_spatial, sp::CRS(\"+init=epsg:4326\"))\n  central_spatial<-sf::st_as_sf(central_spatial)\n  buffer_dist<-buffer_km*1000\n  central_buffer<-sf::st_buffer(central_spatial, buffer_dist)\n  return(central_buffer)\n  }\n\n\n\n\nThe parameters to give are the kilometers and the central point\n\nThis_buffer<-create_buffer(central_point=This_point,buffer_km=20)\n\n\nclass(This_buffer)\n\nHere you can see the buffer you created using the point (or central location)\n\nBuffer_plot<-ggplot()+\n  geom_point(data = GPS_ten,\n            aes(x=Longitude,y = Latitude),color='red',size=0.5)+\n  geom_point(data=This_point,\n             aes(x=Longitude,y=Latitude),color='blue')+\n  geom_sf(data=This_buffer,colour='blue', fill='transparent', linetype='dashed')+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )\nBuffer_plot\n\nUsing the function from the package sp you can create an spatial object using your GPS data\n\nGPS_sp <- GPS_ten\nsp::coordinates(GPS_sp) <- ~Longitude + Latitude\nsp::proj4string(GPS_sp) = sp::CRS(\"+init=epsg:4326\")\nGPS_sp<-sf::st_as_sf(GPS_sp)\n\n\nclass(GPS_sp)\nclass(This_buffer)\n\nHere the function over identifies which location intersect with the buffer.\n\nGPS_over<-sapply(sf::st_intersects(GPS_sp,This_buffer), function(z) if (length(z)==0) NA_integer_ else z[1])\n\nThis information can be added as a column in the data frame.\n\nGPS_ten$In_or_out <- as.numeric(GPS_over)\n\nTo remove the locations that were within the buffer you can use the function filter and is.na from the package tidyverse\n\nGPS_without <- GPS_ten %>%\n  filter(is.na(In_or_out)==TRUE)\n\nHere you can see that the locations inside the buffer were removed.\n\nFiltered_plot<-ggplot()+\n  geom_point(data = GPS_without,\n            aes(x=Longitude,y = Latitude),color='red',size=0.5)+\n  geom_point(data=This_point,\n             aes(x=Longitude,y=Latitude),color='blue')+\n  geom_sf(data=This_buffer,colour='blue', fill='transparent', linetype='dashed')+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )\nFiltered_plot\n\nThis function can be used to remove all the nest locations within a distance buffer. You could also replace the polygon (here the buffer) for some land shapefiles.\n\n\nCompare\nUsing the package patchwork we can see the difference side by side.\n\nlibrary(patchwork)\n\n\nOriginal_plot+Buffer_plot+Filtered_plot\n\n\n\n\n\n\n\n\n\n\n\nFurther reading\nOther functions that did the job:\ngBuffer from rgeos deprecated\nRead more about package sf"
  },
  {
    "objectID": "blog/2024-09-19-identifyevents/identifyevents.html",
    "href": "blog/2024-09-19-identifyevents/identifyevents.html",
    "title": "Identify events",
    "section": "",
    "text": "Intro\nThis post shows an option to assign a trip number to locations of animals.\nThis same method could be use to identify events on spatial data.\n\n\nData\nFor the exercises, test data is from Masked boobies. \n\n#devtools::install_github(\"MiriamLL/sula\")\nlibrary(sula)\n\nThis data frame contains data from 10 individuals.\n\nunique(sula::GPS_raw$IDs)\n\nUsing functions from the package tidyverse, one of the individuals can be selected.\n\nlibrary(tidyverse)\n\n\nGPS_one<-GPS_raw %>% filter(IDs=='GPS08')\n\nThe original data can be checked using functions from the package ggplot2.\n\nlibrary(ggplot2)\n\nIn the plot all locations are presented, but events can not be identify yet.\n\nPlot_original<-ggplot(GPS_one, aes(x=Longitude, y=Latitude)) + \n  geom_point()+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  ggtitle('Tracking data')+xlab('Longitude')+ylab('Latitude')+\n  theme_bw()+\n  theme(\n    legend.position='none',\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\nPlot_original\n\n\n\nRemove central locations\nAn event would be defined as each time the animal leaves its central location.\nThe information about the central location is needed.\n\nCentral_location<-data.frame(Longitude=-109.4531, Latitude=-27.20097)\n\nThe locations are to be transform into spatial data.\n\nGPS_spatial <- GPS_one\nsp::coordinates(GPS_spatial) <- ~Longitude + Latitude\nsp::proj4string(GPS_spatial) = sp::CRS(\"+init=epsg:4326\")\nGPS_spatial<-sf::st_as_sf(GPS_spatial)\n\nThe buffer function is explained in the previous post.\nThe function uses the central location to create a buffer.\nA number “1” shows that the location is inside the 1 km buffer and an NA that is outside the buffer.\nThe information is added on a column in the data frame.\n\ncreate_buffer<-function(central_point=central_point, buffer_km=buffer_km){\n  central_spatial<- sp::SpatialPoints(cbind(central_point$Longitude,central_point$Latitude)) \n  sp::proj4string(central_spatial)= sp::CRS(\"+init=epsg:4326\") \n  central_spatial <- sp::spTransform(central_spatial, sp::CRS(\"+init=epsg:4326\"))\n  central_spatial<-sf::st_as_sf(central_spatial)\n  buffer_dist<-buffer_km*1000\n  central_buffer<-sf::st_buffer(central_spatial, buffer_dist)\n  return(central_buffer)\n  }\nThis_buffer<-create_buffer(central_point=Central_location,buffer_km=1)\nGPS_over<-sapply(sf::st_intersects(GPS_spatial,This_buffer), function(z) if (length(z)==0) NA_integer_ else z[1])\nGPS_one$trip <- as.numeric(GPS_over)\n\nThe NAs (when the animal is outside the buffer) can be replaced for a 0.\nThis is not strictly necessary but facilitates the interpretation of the column.\n\nGPS_one$trip[is.na(GPS_one$trip)] <- 0\n\nAlternatively, text can be added.\n\nGPS_one$trip <- gsub(\"1\", \"At_central_locations\", GPS_one$trip)\nGPS_one$trip <- gsub(\"0\", \"At_trip\", GPS_one$trip)\n\n\n\nAssign trip number\nTo assign the trip number, the first step was adding a new column with a sequential number.\n\nGPS_one$sequential_number<-as.integer(paste(seq(1:as.numeric(nrow(GPS_one)))))\n\nAfterwards, all the locations inside the central locations were removed.\n\nGPS_trips<-subset(GPS_one, GPS_one$trip == \"At_trip\")\n\nBy removing the locations inside the central locations, we end up with gaps in the sequence number.\nHere, I added a number of event everytime that the sequence was broken.\n\nGPS_trips$trip_number <- (cumsum(c(1L, diff(GPS_trips$sequential_number)) != 1L))+ 1\n\nIn case there might be more than ten trips, adding more zeros using the function str_pad might be useful.\n\nGPS_trips$trip_number <- stringr::str_pad(GPS_trips$trip_number ,  2, pad = \"0\")\n\nFor easier interpretation, text can be added.\n\nGPS_trips$trip_number<-paste0(\"Trip_\", GPS_trips$trip_number )\n\nUsing the function unique the number of events (or trips) can be checked.\n\nunique(GPS_trips$trip_number)\n\n\n\nPlot\nThe different events can now be easily observed by adding the argument color=trip_number in the plot.\n\nPlot_trips<-ggplot(GPS_trips, aes(x=Longitude, y=Latitude, color=trip_number)) + \n  geom_point()+\n  geom_point(data=Central_location,aes(x = Longitude,y= Latitude), \n             color=\"black\", fill=\"black\",shape=16,size=5,stroke=1.5)+\n  theme_bw()+\n  scale_x_continuous(limits=c(-109.7,-108.9),labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  ggtitle('Trip number')+xlab('Longitude')+ylab('Latitude')+labs(color='')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5),\n    legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n    legend.position = c(0.12,0.75))\nPlot_trips\n\n\n\n\n\n\n\n\n\n\n\nFurther reading\nFunctions count_trips from the package sula can be used to run loops."
  },
  {
    "objectID": "blog/2024-10-08-distancepoints/distancepoints.html",
    "href": "blog/2024-10-08-distancepoints/distancepoints.html",
    "title": "Distance between consecutive points",
    "section": "",
    "text": "Calculate distance between points between consecutive locations.\nOne of the uses in animal movements it to calculate how much distance an animal covers on one trip."
  },
  {
    "objectID": "blog/2024-10-08-distancepoints/distancepoints.html#further-reading",
    "href": "blog/2024-10-08-distancepoints/distancepoints.html#further-reading",
    "title": "Distance between consecutive points",
    "section": "Further reading",
    "text": "Further reading\nThe function dist_points from the package sula runs this function in loop.\nThis helps when there are more than one trip and several individuals."
  },
  {
    "objectID": "blog/2024-11-05-completeorincomplete/completeorincomplete.html",
    "href": "blog/2024-11-05-completeorincomplete/completeorincomplete.html",
    "title": "Complete or incomplete trips",
    "section": "",
    "text": "Intro\nWhen tracking animals, there may be times when they enter areas with no reception.\nIf a large part of a trip takes place in such areas, you should consider whether to include this data in your calculations.\nFor instance, long gaps could lead to an underestimation of the actual distance traveled by the animal.\nIn this post, I’ll walk you through the steps I used to determine whether trips are complete or incomplete.\nThis post has three parts:\n- Create a gap\n- Calculate gaps\n- Identify if our trips are complete or incomplete\n\n\nData\nFor the exercises, test data is from masked boobies.  To access the data you have to install the package sula: devtools::install_github(“MiriamLL/sula”)\n\nlibrary(sula)\n\nUse the function select from tidyverse to keep the columns ID, latitude, longitude, date, time, and trip number.\n\nlibrary(tidyverse)\nData_1original<-GPS_preparado %>% select(IDs,Latitude,Longitude,DateGMT,TimeGMT,trip_number)\n\n\n\nCreating a gap\nIn this part we would eliminate some locations to create an artificial gap\n\nlibrary(sf)\n\nSelect a location with “low reception” and remove all the locations to create the gaps\n\nThis_area<-data.frame(Longitude=-109.4,Latitude=-27.6)\n\ncreate_buffer<-function(central_point=central_point, buffer_km=buffer_km){\n  central_spatial<- sp::SpatialPoints(cbind(central_point$Longitude,central_point$Latitude)) \n  sp::proj4string(central_spatial)= sp::CRS(\"+init=epsg:4326\") \n  central_spatial <- sp::spTransform(central_spatial, sp::CRS(\"+init=epsg:4326\"))\n  central_spatial<-sf::st_as_sf(central_spatial)\n  buffer_dist<-buffer_km*1000\n  central_buffer<-sf::st_buffer(central_spatial, buffer_dist)\n  return(central_buffer)\n}\n\nThis_buffer<-create_buffer(central_point=This_area,buffer_km=20)\n\nData_2spatial <- Data_1original\nsp::coordinates(Data_2spatial) <- ~Longitude + Latitude\nsp::proj4string(Data_2spatial) = sp::CRS(\"+init=epsg:4326\")\nData_2spatial <-sf::st_as_sf(Data_2spatial)\nData_3creategap<-sapply(sf::st_intersects(Data_2spatial ,This_buffer), function(z) if (length(z)==0) NA_integer_ else z[1])\nData_1original$trip <- as.numeric(Data_3creategap)\nData_4withgap <- Data_1original %>%\n  filter(is.na(trip)==TRUE)\n\nPlot the area with low reception\n\nPlot_locations<-ggplot()+\n  geom_point(data = Data_4withgap,aes(x=Longitude,y = Latitude),color=\"#6a994e\",size=0.5)+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))+\n  geom_sf(data=This_buffer,colour='blue', fill='transparent', linetype='dashed')+\n  geom_text(data=This_area, aes(x=Longitude,y=Latitude,label=\"No reception\"),hjust=+0.46, vjust=0, size=3)\nPlot_locations\n\n\n\nCalculate gaps\nA column in the format POSIXct is needed for this example.\n\nData_4withgap <- Data_4withgap %>%\n  mutate(dt= as.POSIXct(strptime(paste0(DateGMT,\" \",TimeGMT), format=\"%d/%m/%Y %H:%M:%S\")))\n\nChecking gaps in time on one individual trip.\n\nData_5oneindividual<-Data_4withgap %>% filter(IDs=='GPS09') %>% filter(trip_number=='trip_2')\n\n\nData_5oneindividual<-Data_5oneindividual %>%\n  mutate(times_lag=lag(dt))%>%\n  mutate(time_dif=as.numeric(difftime(dt, times_lag, units = \"mins\")))%>%\n  mutate(time_dif_mins = round(time_dif,2))\n\nThis trip has a large gap.\n\nrange(Data_5oneindividual$time_dif_mins,na.rm=TRUE)\n\nCreate a loop to calculate gaps separated by individuals and trips.\n\ncalculate_gaps<-function (this_data = this_data, \n                          column_datetime = column_datetime, \n                          column_separator = column_separator){\n  # to standardize the column names\n  this_data$column_separator<- this_data[[column_separator]]\n  this_data$column_datetime <- this_data[[column_datetime]]\n  trips_list <- split(this_data, this_data$column_separator)\n    gaps_list <- list()\n    for (i in seq_along(trips_list)) {\n        trip_df <- trips_list[[i]]\n        trip_df<-trip_df %>%\n          mutate(times_lag=lag(dt))%>%\n          mutate(time_dif=as.numeric(difftime(dt, times_lag, units = \"mins\")))%>%\n          mutate(time_dif_mins = round(time_dif,2))\n        gaps_list[[i]] <- trip_df}\n    gaps_df <- do.call(\"rbind\", gaps_list)\n    return(gaps_df)\n}\n\nFor this, would help to have an unique ID, which helps separate the individual and their trips.\n\nData_5uniqueIds <- Data_4withgap %>%\n  mutate(unique_id=paste0(IDs,'_',trip_number))\n\nTo run the function, provide the data frame, the information for separating, and the name of the column where the date and time are provided.\n\nData_6uniqueIds<-calculate_gaps(this_data=Data_5uniqueIds,\n                                column_separator='unique_id',\n                                column_datetime='dt')\n\n\n\nComplete or incomplete\nBy using the function summarise, we can see which trips have large gaps.\n\nData_7gaps<-Data_6uniqueIds %>%\n  group_by(unique_id)%>%\n  summarise(min_gap=min(time_dif_mins,na.rm = TRUE),\n            max_gap=max(time_dif_mins,na.rm = TRUE))\n\nBased on the gaps during the trips, the trips could be classified as complete or incomplete.\nFor example, here an incomplete trip would be any trip that had a gap of more than 30 minutes.\n\nData_7gaps <- Data_7gaps%>%\n  mutate(trip_class = case_when(max_gap <= 30 ~ 'Complete',\n                                TRUE ~ 'Incomplete'))\n\nUse this table to identify those trips that were incomplete.\n\nunique_incomplete<-unique((subset(Data_7gaps,Data_7gaps$trip_class=='Incomplete')$unique_id))\n\nUse the information above, to add the classification on the tracking locations.\n\nData_8gaps <- Data_6uniqueIds %>%\n  mutate(trip_class = case_when(unique_id %in% unique_incomplete ~ 'Incomplete',\n                                TRUE ~ 'Complete'))\n\nPlot incomplete trips.\n\nPlot_trips<-ggplot()+\n  geom_point(data = Data_8gaps,aes(x=Longitude,y = Latitude,color=trip_class),size=0.5)+\n  scale_x_continuous(labels = function(x) paste0(-x, '\\u00B0')) +\n  scale_y_continuous(labels = function(x) paste0(-x, '\\u00B0'))  +\n  xlab('Longitude')+ylab('Latitude')+\n  theme(\n    panel.background = element_rect(fill = '#edf2f4'),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),legend.position='none',\n    panel.border = element_rect(colour = \"black\", fill=NA, size=1.5)\n  )+\n  geom_sf(data=This_buffer,colour='blue', fill='transparent', linetype='dashed')+\n  geom_text(data=This_area, aes(x=Longitude,y=Latitude,label=\"No reception\"),hjust=+0.46, vjust=0, size=3)+\n  theme(\n    legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n    legend.position = c(0.22,0.15))+\n  scale_colour_manual(name='trip',values = c(\"#6a994e\", \"#fca311\"))+ \n  guides(color = guide_legend(override.aes = list(size = 2)))\nPlot_trips\n\n\n\n\n\n\n\n\n\n\n\nFurther reading\nAnother way to check for gaps, using only time in this post."
  },
  {
    "objectID": "blog/2024-12-02-tmap/tmap.html",
    "href": "blog/2024-12-02-tmap/tmap.html",
    "title": "tmap",
    "section": "",
    "text": "When analyzing tracking data in R, you may want to explore the locations. One option is to export the cleaned data set and open it a GIS program. However, R also offers interactive mapping features. In this post, I’ll walk you through the steps I used to create interactive maps with my GPS data."
  },
  {
    "objectID": "blog/2024-12-02-tmap/tmap.html#transform",
    "href": "blog/2024-12-02-tmap/tmap.html#transform",
    "title": "tmap",
    "section": "Transform",
    "text": "Transform\nThe function fortify helps the data frame to be more easily be plotted.\n\nlibrary(tidyverse)\n\n\nData_2fortify<-fortify(Data_1original)\n\nMake sure your lat and lon are numerical\n\nData_2fortify$lat<-as.numeric(Data_2fortify$Latitude)\nData_2fortify$lon<-as.numeric(Data_2fortify$Longitude)\n\nTransform to spatial.\n\nlibrary(sf)\n\nSelect which CRS you will like to use.\n\nData_3spatial <- st_as_sf(Data_2fortify, coords = c(\"lon\", \"lat\"),crs = 4326, agr = \"constant\")\n\nSelect the columns that are of interest.\n\nData_4info<-Data_3spatial[,c(\"IDs\",\"trip_number\",\"dia_hora\")]"
  },
  {
    "objectID": "blog/2025-01-15-bathymetry/bathymetry.html",
    "href": "blog/2025-01-15-bathymetry/bathymetry.html",
    "title": "Bathymetry",
    "section": "",
    "text": "Intro\nBathymetry gives us information on the water depth around an area.\nThis post includes:\n- Download raster data\n- Read and subset raster data\n- Plot raster data\n\n\nDownload raster data\nGEBCO: General Bathymetry Chart of the Oceans provides information from bathymetry in the ocean.\nTo download visit webpage\nGo to:\n- Download data for user-defined areas\n- Use the application\n- Add your coordinates -here I use 1 to 10 and 50 to 60-\n- Add to basket and download\n\n\nLoad\nTo download test data in tif format click here.\nSelect the directory where the information is stored, or as here, use the data directly form the repository.\n\nBath_tif<-'https://github.com/MiriamLL/data_supporting_webpage/raw/refs/heads/main/Blog/2025/Bathymetry/gebco_2024_n60.0_s50.0_w1.0_e9.0.tif'\n\nLoad the terra package for reading raster data\n\nlibrary(terra)\n\nThe function rast helps to read raster data - replacing package raster\n\nBath_file<-rast(Bath_tif)\n\nChange to data frame\n\nBath_dataframe <- as.data.frame(Bath_file, xy = TRUE)\n\nAlternatively, use the test information included in the package GermanNorthSea\n\n##devtools::install_github(\"MiriamLL/GermanNorthSea\")\nlibrary(GermanNorthSea)\n\n\nBath_dataframe<-GermanNorthSea::German_bath\n\nLoad the package tidyverse\n\nlibrary(tidyverse)\n\nUse filter to subset your data\n\nBath_dataframe_sub <-Bath_dataframe  %>%\n  filter(x > 2 & x < 10)%>%\n  filter(y > 52 & y < 57)%>%\n  rename(Bathymetry=3) %>%\n  filter(Bathymetry < 10)\n\n\n\nPlot\nLoad the package ggplot2\n\nlibrary(ggplot2)\n\nPlot your data using geom_raster\n\nggplot() +\n  geom_raster(data = Bath_dataframe_sub , aes(x = x, y = y, fill = Bathymetry)) +\n  scale_fill_viridis_c(option = \"mako\")+\n  theme_void()+\n  theme(legend.position='bottom')+\n  xlab('Longitude')+ylab('Latitude')+\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))\n\nLoad the package sf\n\nlibrary(sf)\n\nUse the function st_transform to convert to the same CRS\n\nGerman_land<-st_transform(GermanNorthSea::German_land, 4326)\n\nAdd the land to the plot using geom_sf\n\nPlot_bath<-ggplot() +\n  geom_raster(data = Bath_dataframe_sub , aes(x = x, y = y, fill = Bathymetry)) +\n  geom_sf(data = German_land, colour = 'black', fill = '#ffffbe')+\n  scale_fill_viridis_c(option = \"mako\")+\n  theme_void()+\n  theme(legend.position='bottom')+\n  xlab('Longitude')+ylab('Latitude')+\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))\nPlot_bath\n\nMore details about how to add features to a map here\n\n\n\n\n\nFurther reading\n\nPackage GermanNorthSea\nPackage terra\nPackage sf\nGEBCO download"
  },
  {
    "objectID": "blog/2025-02-15-distancetocoast/distancetocoast.html",
    "href": "blog/2025-02-15-distancetocoast/distancetocoast.html",
    "title": "Distance to coast",
    "section": "",
    "text": "Intro\nDistance to coast gives us information on the distance (in meters) from one point at sea to the nearest coast.\nThis post includes:\n- Download raster data\n- Read and subset raster data\n- Plot raster data\n\n\nDistance to coast\nTo download:\n- Access OceanColor NASA\n- Select the interpolated 0.01-degree GeoTiff packed together with a brief description file.\n- Unzip information.\n\n\nRead and subset\nTo read from file.\nSelect the directory where the information is.\n\nthis_folder<-here()\nthis_file<-paste0(this_folder,\"/GMT_intermediate_coast_distance_01d.tif\")\nthis_raster<-rast(this_file)\n\n\n\n\nAlternatively, use the data directly from the repository.\n\nDistCoast_tif<-\"https://github.com/MiriamLL/data_supporting_webpage/raw/refs/heads/main/Blog/2025/DistanceToCoast/Subset_GMT_intermediate_coast_distance_01d.tif\"\n\nUse the package terra to use the function rast.\nThen convert to data frame.\n\nlibrary(terra)\nDistCoast_file<-rast(DistCoast_tif)\n\n\nDistCoast_dataframe <- as.data.frame(DistCoast_file, xy = TRUE)\n\nThe file is quite large, so I recommend to subset the data to the area of interest.\nHere I select the area close to the German North Sea.\n\nlibrary(tidyverse)\nDistCoast_dataframe_sub <-DistCoast_dataframe  %>%\n  filter(x > 2 & x < 10)%>%\n  filter(y > 52 & y < 57)%>%\n  rename(Dist=3) %>%\n  mutate(Dist = as.numeric(Dist))\n\nTo save as rda would make the reading a lot faster.\n\nGerman_distancecoast<-DistCoast_dataframe_sub\nsave(German_distancecoast, file=\"German_distancecoast.rda\")\n\n\n\nPlot\nTo plot adding land.\n\nlibrary(sf)\n\nMake sure is in the same CRS.\n\nGerman_land<-st_transform(GermanNorthSea::German_land, 4326)\n\nTo exclude information on land.\n\nlibrary(tidyverse)\n\n\nDistCoast_dataframe_sub<-DistCoast_dataframe_sub %>%\n  filter(Dist > -20)\n\nUse ggplot to create your plot.\n\nPlot_distance<-ggplot() +\n  geom_raster(data = DistCoast_dataframe_sub, aes(x = x, y = y, fill = Dist)) +\n  geom_sf(data = German_land, colour = 'black', fill = '#ffffbe')+\n  scale_fill_viridis_c(option = \"rocket\")+\n  theme_void()+\n  theme(legend.position='bottom')+\n  xlab('Longitude')+ylab('Latitude')+\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))\nPlot_distance+\n  guides(fill=guide_legend(title=\"Distance to coast\"))\n\n\n\n\n\n\nFurther reading\n\nPackage GermanNorthSea\nPackage terra\nPackage sf\nOceanColor NASA"
  },
  {
    "objectID": "blog/2025-03-03-fishingdata/fishingdata.html",
    "href": "blog/2025-03-03-fishingdata/fishingdata.html",
    "title": "Fishing effort",
    "section": "",
    "text": "Global Fishing Watch map is a open-access online tool designed for the visualization and analysis of vessel-based human activity at sea. It allows anyone with an internet connection to access the map and monitor global fishing activity from 2012 to the present. The map tracks more than 65,000 commercial fishing vessels, which are responsible for a significant portion of the global seafood catch.\nThe data is broadcast through the automatic identification system (AIS) and collected via satellites and terrestrial receivers. This information is then combined with vessel monitoring system data provided by partner countries. A fishing detection algorithm is applied to determine the “apparent fishing effort” based on changes in vessel speed and direction. The heat map grid cell colors indicate the level of fishing activity in each area, allowing for precise comparisons."
  },
  {
    "objectID": "blog/2025-03-03-fishingdata/fishingdata.html#plot-1",
    "href": "blog/2025-03-03-fishingdata/fishingdata.html#plot-1",
    "title": "Fishing effort",
    "section": "Plot",
    "text": "Plot\nShapefiles of the German North Sea are accessible in my package GermanNorthSea.\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/GermanNorthSea\")\nlibrary(GermanNorthSea)\n\nThe package sf helps to convert the CRS.\n\nlibrary(sf)\n\nTo transform to the appropriate CRS, use the function st_transform.\n\nGerman_land<-st_transform(GermanNorthSea::German_land, 4326)\nGerman_EEZ<-st_transform(GermanNorthSea::German_EEZ, 4326)\nGerman_SCA<-st_transform(GermanNorthSea::German_SCA, 4326)\nGerman_natura<-st_transform(GermanNorthSea::German_natura, 4326)\n\nUse ggplot to create your plot. Each dot is a value of fishing effort.\n\nFishing_plot<-ggplot() +\n  geom_tile(data = Fishing_sub, aes(x = x, y = y, fill = FishingEffort)) +\n  theme_bw()+\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))\n\nChange plot style\n\nFishing_plot<-ggplot() +\n  geom_tile(data = Fishing_sub, aes(x = x, y = y, fill = FishingEffort)) +\n  geom_sf(data = German_EEZ, colour = 'black', fill = 'transparent')+\n  geom_sf(data = German_land, colour = 'black', fill = '#edede9')+\n  geom_sf(data = German_natura, colour = 'transparent', fill = '#3d6d22',alpha=0.2)+\n  theme_void()+\n  xlab('Longitude')+ylab('Latitude')+\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))+\n  geom_tile(data = Fishing_sub, aes(x = x, y = y, fill = FishingEffort)) +\n  theme(legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n        legend.position = c(0.30,0.30),\n        panel.background = element_rect(fill = '#edf2f4'),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))+\n  scale_fill_gradient(low = \"#fcbf49\", high = \"#d62828\")+ \n  guides(fill=guide_legend(title=\"GFW \\nFishing effort \\nApr May 2018\"))\nFishing_plot\n\n\nNotes\nThis data is part of an exercise using information from the platform, and the details provided have not been verified or checked for accuracy. The figures and patterns observed are based on the data from Global Fishing Watch, but they may not represent the final, validated insights.\nNo guarantee is made regarding the accuracy or reliability of this data."
  },
  {
    "objectID": "blog/2025-04-15-copernicus-sst/copernicus-sst.html",
    "href": "blog/2025-04-15-copernicus-sst/copernicus-sst.html",
    "title": "Sea surface temperature",
    "section": "",
    "text": "The Copernicus Marine Service (CMS), also known as the Copernicus Marine Environment Monitoring Service, is the marine component of the European Union’s Copernicus Programme.\nIt delivers free, regular, and systematic information on the state of the ocean, encompassing the Blue (physical), White (sea ice), and Green (biogeochemical) components, both globally and regionally.\nFunded by the European Commission (EC) and implemented by Mercator Ocean International, the service is designed to support EU policies and international legal commitments related to Ocean Governance. It also addresses the global need for ocean knowledge and fosters the Blue Economy across all maritime sectors by providing cutting-edge ocean data and information at no cost.\nThis post includes:\n- Download raster data\n- Read and subset raster data\n- Plot raster data"
  },
  {
    "objectID": "blog/2025-04-15-copernicus-sst/copernicus-sst.html#read-data",
    "href": "blog/2025-04-15-copernicus-sst/copernicus-sst.html#read-data",
    "title": "Sea surface temperature",
    "section": "Read data",
    "text": "Read data\nSelect the directory where the information is stored, or as here, use the data directly form the repository.\n\nSST_nc<-\"https://github.com/MiriamLL/data_supporting_webpage/raw/refs/heads/main/Blog/2025/SST/cmems_mod_glo_phy_my_0.083deg-climatology_P1M-m_1729785319560.nc\"\n\nLoad the terra package for reading raster data.\n\nlibrary(terra)\n\nThe function rast helps to read raster data - replacing package raster.\n\nSST_file<-rast(SST_nc)"
  },
  {
    "objectID": "blog/2025-04-15-copernicus-sst/copernicus-sst.html#subset-raster-data",
    "href": "blog/2025-04-15-copernicus-sst/copernicus-sst.html#subset-raster-data",
    "title": "Sea surface temperature",
    "section": "Subset raster data",
    "text": "Subset raster data\nChange to data frame for data wrangling.\n\nSST_dataframe <- as.data.frame(SST_file, xy = TRUE)\n\nLoad the package tidyverse.\n\nlibrary(tidyverse)\n\nUse filter to subset the data to a specific geographical area.\n\nSST_sub <-SST_dataframe  %>%\n  filter(x > 2 & x < 10)%>%\n  filter(y > 52 & y < 57)\n\nObtain mean values per latitude and longitude\nThere are many columns with data per depth, as data was collected almost every meter.\n\nncol(SST_sub)\n\nTo keep columns with the depth area use the functions select and starts_with.\n\nSST_depth<-SST_sub %>%\n  select(starts_with(\"thetao\"))\n\nCheck the depths were the data was collected.\n\nDepths<-colnames(SST_depth)\nhead(Depths)\n\nUsing functions from tidyverse such as rowwise, summarise the information per depth.\n\nSST_depth_perloc<-SST_depth %>%\n  rowwise()%>%\n  mutate(mean_SST = mean(c_across(where(is.numeric)),na.rm=TRUE),\n         min_SST = min(c_across(where(is.numeric)),na.rm=TRUE),\n         max_SST = max(c_across(where(is.numeric))),na.rm=TRUE)%>%\n  relocate(mean_SST,min_SST,max_SST)\n\nThe function arrange from the package tidyverse allows to see the columns of interest first.\n\nfirst_column<-SST_depth[1,]\nlong_values<-first_column %>% \n  pivot_longer(\n    cols = 1:228, \n    names_to = \"type\",\n    values_to = \"value\"\n)\narrange_values<-arrange(long_values, desc(value))\n\n\n\n\nNow there is a value per latitude and longitude of the sea surface temperature, summarizing the first 60 m of the water column.\n\nSST_sub$SST<-SST_depth_perloc$mean_SST\n\n\nmean(SST_sub$SST)"
  },
  {
    "objectID": "blog/2025-05-05-lightpollution/lightpollution.html",
    "href": "blog/2025-05-05-lightpollution/lightpollution.html",
    "title": "Light pollution",
    "section": "",
    "text": "The Visible Infrared Imaging Radiometer Suite (VIIRS) is aboard the joint NASA/NOAA Suomi National Polar-orbiting Partnership (Suomi NPP) and NOAA-platforms. VIIRS collects visible and infrared imagery along with global observations of Earth’s land, atmosphere, cryosphere, and ocean."
  },
  {
    "objectID": "blog/2025-05-05-lightpollution/lightpollution.html#data-frame",
    "href": "blog/2025-05-05-lightpollution/lightpollution.html#data-frame",
    "title": "Light pollution",
    "section": "Data frame",
    "text": "Data frame\nTo manipulate convert to data frame.\n\nLight_pollution_df <- as.data.frame(Light_pollution, xy = TRUE)\nbeepr::beep(sound=1)\n\nThe function rename, allows to change the name of the column. The radiance information is in the third column.\n\nLight_pollution_radiance<-Light_pollution_df %>%\n  rename(radiance=3)\n\nCheck if the radiance values are plausible.\n\nrange(Light_pollution_radiance$radiance)\n\n\nBasic plot\nUse the function geom_spatraster to plot the radiance data.\n\nggplot() +\n  geom_spatraster(data = Light_pollution) +\n  \n  coord_sf(xlim = c(4.5,9), ylim = c(53,56),\n           label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'),\n           default_crs = sf::st_crs(4326))+\n  scale_fill_gradient(name='Light pollution \\n in the North Sea \\n Radiance ',\n                      limits = c(0,1),\n                      low = 'black', high = '#f9c74f', \n                      na.value = \"grey93\", \n                      breaks = c(0.02,0.20, 0.40, 0.60,0.75, 0.90)\n                      )+\n  NULL\n\n\n\nChange theme\nChange the arguments inside theme to adjust the looks of your plot.\n\nggplot() +\n  geom_spatraster(data = Light_pollution) +\n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n           label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'),\n           default_crs = sf::st_crs(4326))+\n  scale_fill_gradient(name='Light pollution \\n in the North Sea \\n Radiance ',\n                      limits = c(0,1),\n                      low = 'black', high = '#f9c74f', \n                      na.value = \"grey93\", \n                      breaks = c(0.02,0.20, 0.40, 0.60,0.75, 0.90)\n                      )+\n  theme_void()+\n    theme(legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n        legend.position = c(0.20,0.30),\n        panel.background = element_rect(fill = 'black'),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill=NA, size=1.5),\n        legend.text=element_text(color='#f9c74f',size=12),\n        legend.title=element_text(color='#f9c74f',size=12))+ \n  NULL\n\n\n\nChange fill\nSelect some colors create a color palette.\n\ncolor_NA <-\"#000000\"\ncolor_K <-\"#ffff3f\"\ncolor_J <-\"#eeef20\"\ncolor_I <-\"#dddf00\"\ncolor_H <-\"#d4d700\"\ncolor_G <-\"#bfd200\"\ncolor_F <-\"#aacc00\"\ncolor_E <-\"#80b918\"\ncolor_D <-\"#55a630\"\ncolor_C <-\"#2b9348\"\ncolor_B <-\"#007f5f\"\ncolor_A <-\"#548c2f\"\nyour_palette<-c(color_NA,color_A,color_B,color_C,color_D,color_E,color_F,color_G,color_H,color_I,color_J,color_K)\n\nInclude scale_fill_gradientn to use the color palette.\n\nggplot() +\n  geom_spatraster(data = Light_pollution) +\n \n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n           label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'),\n           default_crs = sf::st_crs(4326))+\n \n  theme_void()+\n    theme(legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n        legend.position = c(0.20,0.30),\n        panel.background = element_rect(fill = 'black'),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill=NA, size=1.5),\n        legend.text=element_text(color='#f9c74f',size=12),\n        legend.title=element_text(color='#f9c74f',size=12))+\n  \n  scale_fill_gradientn(name='Light pollution \\n in the North Sea \\n Radiance ',\n                      limits = c(0,1),\n                      colours = your_palette,\n                      na.value = \"grey93\", \n                      breaks = c(0.02,0.20, 0.40, 0.60,0.75, 0.90)\n                      )+\n  NULL\n\n\n\nAdd text\nAdd text using the function annotate for reference.\n\nggplot() +\n  geom_spatraster(data = Light_pollution) +\n \n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n           label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'),\n           default_crs = sf::st_crs(4326))+\n \n  theme_void()+\n    theme(legend.background = element_rect(colour = \"transparent\", fill = \"transparent\"),\n        legend.position = c(0.20,0.30),\n        panel.background = element_rect(fill = 'black'),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_rect(colour = \"black\", fill=NA, size=1.5),\n        legend.text=element_text(color='#f9c74f',size=12),\n        legend.title=element_text(color='#f9c74f',size=12))+\n  \n  scale_fill_gradientn(name='Light pollution \\n in the North Sea \\n Radiance ',\n                      limits = c(0,1),\n                      colours = your_palette,\n                      na.value = \"grey93\", \n                      breaks = c(0.02,0.20, 0.40, 0.60,0.75, 0.90)\n                      )+\nannotate(\"text\", x = 7.885143539318454-1.6, y = 54.181291760152874,\n           label = \"Helgoland\",size=5,color='#d6d6d6',hjust = 0)"
  },
  {
    "objectID": "blog/2025-06-02-shippingtraffic/shippingtraffic.html",
    "href": "blog/2025-06-02-shippingtraffic/shippingtraffic.html",
    "title": "Shipping traffic",
    "section": "",
    "text": "The Vessel Density maps in the EU are created since the 2019 by Cogea for the European Marine Observation and Data Network EMODnet. The dataset is updated every year and is available for viewing and download on EMODnet Human Activities web portal (https://emodnet.ec.europa.eu/en/human-activities).\nThe maps are based on AIS data yearly purchased from Collecte Localisation Satellites (CLS) and ORBCOMM. The maps, GeoTIFF format, show shipping density in 1x1km cells of a grid covering all EU waters and some neighbouring areas.\nDensity is expressed as hours per square kilometre per month. The following ship types are available:0 Other, 1 Fishing, 2 Service, 3 Dredging or underwater ops, 4 Sailing, 5 Pleasure Craft, 6 High speed craft, 7 Tug and towing, 8 Passenger, 9 Cargo, 10 Tanker, 11 Military and Law Enforcement, 12 Unknown and All ship types.\nData are available by month of year. Yearly averages are also available.\n\n\nTo download go to EMODnet Map Viewer > Catalogue > EMODnet Human Activities > Vessel density > Monthly totals 2017-2023 > All Types > Click on the “i” icon > Select Download.\nA zip file named “EMODnet_HA_Vessel_Density_all_2017-2023 would be downloaded. For the period of December 2023, the raster information is under vesseldensity_all_20231201.tif.\n\n\n\nTo download test data in tif format click here.\nUse the package terra to use the function rast.\n\nlibrary(terra)\n\nThe function rast reads your file as a formal class SpatRaster. Here I am using the file directly from the repository.\n\nShippingTraffic_tif<-'https://github.com/MiriamLL/data_supporting_webpage/raw/refs/heads/main/Blog/2025/ShippingTraffic/ShippingTraffic_crop.tif'\n\n\nShippingTraffic<-rast(ShippingTraffic_tif)\n\n\ncrs(ShippingTraffic)\n\n\nggplot2::ggplot() +\n  tidyterra::geom_spatraster(data = ShippingTraffic) +\n  NULL\n\n\n\n\n\nlibrary(tidyverse)\n\n\nShippingTraffic_df <- as.data.frame(ShippingTraffic, xy = TRUE)\nbeepr::beep(sound=1)\n\nThe function rename, allows to change the name of the column. The density information is in the third column.\n\nShippingTraffic_df<-ShippingTraffic_df %>%\n  rename(vessel_density=3)\n\nCheck if the density values are plausible.\n\nrange(ShippingTraffic_df$vessel_density)\n\nValues distribution\n\nhist(ShippingTraffic_df$vessel_density)\n\n\nShippingTraffic_class<-ShippingTraffic_df %>%\n mutate(\n    density_class = case_when(\n      vessel_density <= 0  ~ \"class_A_0\",\n      vessel_density > 0 &  vessel_density < 1 ~ \"class_A_0_1\",\n      vessel_density > 1 &  vessel_density < 2 ~ \"class_A_1_2\",\n      vessel_density > 2 &  vessel_density < 3 ~ \"class_A_2_3\",\n      vessel_density > 3 &  vessel_density < 4 ~ \"class_A_3_4\",\n      vessel_density > 4 &  vessel_density < 5 ~ \"class_A_4_5\",\n      vessel_density > 5 &  vessel_density < 6 ~ \"class_A_5_6\",\n      vessel_density > 6 &  vessel_density < 7 ~ \"class_A_6_7\",\n      vessel_density > 7 &  vessel_density < 8 ~ \"class_A_7_8\",\n      vessel_density > 8 &  vessel_density < 9 ~ \"class_A_8_9\",\n      vessel_density > 9 &  vessel_density < 10 ~ \"class_A_9_10\",\n      \n      vessel_density >= 10 &  vessel_density < 100 ~ \"class_B_10_100\",\n      vessel_density >= 100 &  vessel_density < 1000 ~ \"class_C_100_1000\",\n      vessel_density >= 1000 &  vessel_density < 10000 ~ \"class_D_1000_10000\",\n      vessel_density >= 10000 &  vessel_density < 100000 ~ \"class_E_10000_100000\",\n      TRUE  ~ \"unknown\"\n    ))\n\nThe majority of values are between 0 and 1\n\n\n\n\n\n\nUse the function geom_spatraster to plot the vessel density data.\n\nlibrary(tidyterra)\n\n\nggplot() +\n  geom_spatraster(data = ShippingTraffic)\n\n\n\n\nAdd land for reference using geom_sf and the package GermanNorthSea.\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/GermanNorthSea\")\nlibrary(GermanNorthSea)\n\n\nShippingTraffic_01plot<-ggplot() +\n  geom_spatraster(data = ShippingTraffic) +\n  geom_sf(data = GermanNorthSea::German_EEZ, color='grey',fill='transparent',alpha=0.1, size = 1)+\n  geom_sf(data = GermanNorthSea::German_land, colour = 'black', fill = '#e5e5e5')+\n  coord_sf(xlim = c(3820000,4250000), ylim = c(3370000,3660000),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))\nShippingTraffic_01plot\n\n\n\n\nChange background colors using the arguments on theme.\n\nShippingTraffic_02plot<-ShippingTraffic_01plot+\n  theme_void()+\n    theme(panel.background = element_blank(),\n          panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\nShippingTraffic_02plot\n\n\n\n\nLow traffic\n\nLowShippingTraffic_03plot<-ShippingTraffic_02plot+\n    \n  scale_fill_gradientn(name='Low Vessel density \\n Dec 2023',\n                      na.value = \"transparent\", \n                      colours = palette_yellow<-c(\"#ffff3f\",\"#eeef20\",\"#dddf00\",\"#d4d700\",\"#bfd200\",\"#aacc00\",\"#80b918\",\"#55a630\",\"#2b9348\",\"#007f5f\"),\n                      limits = c(0.00001,10),\n                      breaks = c(2,4,6,8,10),\n                      )\nLowShippingTraffic_03plot\n\nMedium traffic\n\nMediumShippingTraffic_04plot<-ShippingTraffic_02plot+\n  \n    scale_fill_gradientn(name='Medium Vessel density \\n Dec 2023',\n                      na.value = \"transparent\", \n                      colours = palette_green<-c(\"#d8f3dc\",\"#b7e4c7\",\"#95d5b2\",\"#74c69d\",\"#52b788\",\"#40916c\",\"#2d6a4f\",\"#1b4332\",\"#081c15\"),\n                      limits = c(5,100),\n                      breaks = c(5,20,40,60,80,100),\n                      )\nMediumShippingTraffic_04plot  \n\nHigh traffic\n\nHighShippingTraffic_06plot<-ShippingTraffic_02plot+\n  scale_fill_gradientn(name='High Vessel density \\n Dec 2023 \\n (hrs per km2)',\n                      na.value = \"transparent\", \n                      colours = palette_red<-c(\"#e01e37\",\"#da1e37\",\"#c71f37\",\"#bd1f36\",\"#b21e35\",\"#a71e34\",\"#a11d33\",\"#85182a\",\"#6e1423\",\"#641220\"),\n                      limits = c(100,30000),\n                      breaks = c(0,1000,10000,20000,30000),\n                      )\nHighShippingTraffic_06plot\n\n\n\n\n\nyour_palette<-c(\"transparent\", \"#d8f3dc\",\n                \"#b7e4c7\",\"#95d5b2\",\"#74c69d\",\"#52b788\",\"#aacc00\",\n                \"#bfd200\",\"#d4d700\",\"#dddf00\",\"#eeef20\",\"#ffff3f\", \n                \"#e01e37\",\"#da1e37\",\"#c71f37\", \"#bd1f36\",\"#b21e35\",\n                \"#a71e34\",\"#a11d33\",\"#85182a\",\"#6e1423\",\"#641220\")\n\nUse scale_fill_gradientn and rescale to adjust the palette and the legend\n\nShippingTraffic_07plot<-ShippingTraffic_02plot+\n  \n  scale_fill_gradientn(name='Vessel density \\n Dec 2023 \\n hrs per km2',\n                      na.value = \"transparent\", \n                      colours = your_palette,\n                      limits = c(0,30000),\n                      breaks = c(0.05,0.1,0.2,0.5,2,5,10,20,100,1000),\n                      values = scales::rescale(c(0,0.01,0.05,0.1,0.2,0.5,2,5,10,20,100,1000)), \n                      guide = \"legend\"\n                      )\nShippingTraffic_07plot\n\nUse labels inside scale_fill_gradient to make the legend more legible\n\nShippingTraffic_08plot<-ShippingTraffic_02plot+\n  scale_fill_gradientn(name='Vessel density \\n Dec 2023 \\n hrs per km2',\n                      na.value = \"transparent\", \n                      colours = your_palette,\n                      limits = c(0,30000),\n                      breaks = c(0.05,0.1,0.2,0.5,2,5,10,20,100,1000),\n                      values = scales::rescale(c(0,0.01,0.05,0.1,0.2,0.5,2,5,10,20,100,1000)), \n                      guide = \"legend\",\n                      labels = c(\"0 - 0.05\",\"> 0.1\",\"> 0.2\",\"> 0.5\",\"> 2\",\"> 5\",\"> 10\",\"> 20\", \"> 100\",\"> 1,000\") )\nShippingTraffic_08plot\n\nInclude the legend inside the plot and change the theme, also change panel.background\n\nShippingTraffic_09plot<-ShippingTraffic_08plot+\n  theme(legend.position = c(0.20,0.50),\n          legend.background = element_rect(colour = FALSE, fill = FALSE),\n          legend.title=element_text(color='black',size=16),\n          legend.text=element_text(color='black',size=12),\n          legend.key = element_rect(colour = 'transparent', fill = 'transparent'),\n          legend.key.height = unit(3, \"mm\"))\nShippingTraffic_09plot"
  },
  {
    "objectID": "blog/2025-07-01-owf/owf.html",
    "href": "blog/2025-07-01-owf/owf.html",
    "title": "Offshore Wind Farms",
    "section": "",
    "text": "An Offshore Wind Farm (OWF) is defined as a group of wind turbines placed in the ocean to generate electricity using the power of the wind.\n- Wind turbines are installed on foundations anchored to the seabed (or floating, in deeper waters).\n- Blades spin when the wind blows, turning a generator.\n- The electricity generated is sent back to land through underwater power cables.\n- Offshore wind farms have high upfront costs and engineering complexity, produce visual and noise problems, and might have an impact on marine ecosystems and birds.\n\n\n  \n\n\nAlpha Ventus Windmills\nSource: Wikipedia"
  },
  {
    "objectID": "blog/2025-07-01-owf/owf.html#status",
    "href": "blog/2025-07-01-owf/owf.html#status",
    "title": "Offshore Wind Farms",
    "section": "Status",
    "text": "Status\nIn the context of Offshore Wind Farms (OWF), the terms “Production”, “Approved”, and “Planned” refer to the development status or stage of a wind farm project.\n- Production is when the wind farm is fully built and actively generating electricity;\n- Approved is when the wind farm project has received all the necessary legal and environmental permits from authorities but construction has not yet started; and\n- Planned is when the wind farm is in the early stages of development, often proposed or under review, but not yet approved.\n\nunique(OWF_EMODnet$STATUS)\n\nTo only use active OWF the best is to filter using the status and selecting Production.\n\nOWF_Production<-OWF_EMODnet%>%\n  filter(STATUS == 'Production')\n\nWe can also filter the information by using year. Here, we can see that data includes OWF from 2009 to 2020.\n\nunique(OWF_Production$YEAR)\n\nHere, lets separate those OWF before 2016 from the ones after.\n\nOWF_Before2016<-OWF_Production %>%\n  filter(YEAR <= 2016)\n\n\nOWF_After2016<-OWF_Production %>%\n  filter(YEAR > 2016)\n\nPlot using different colors for OWF before 2016 and after 2016.\n\nOWF_1plot<-ggplot(OWF_EMODnet) + # Gives CRS\n  \n  # Fill colors\n  geom_sf(data = GermanNorthSea::German_EEZ, colour = \"black\", fill= '#56C1D5', lwd = 0.5)+\n  geom_sf(data = GermanNorthSea::German_natura, colour = 'transparent', fill= '#84a98c', alpha=0.5,lwd = 0.5)+\n  geom_sf(data = GermanNorthSea::German_SCA, colour = 'transparent', fill= '#84a98c', alpha=0.5,lwd = 0.5)+\n  geom_sf(data = GermanNorthSea::German_land, colour = '#9a8c98', fill = '#9a8c98')+\n \n  # Line colors\n  geom_sf(data = GermanNorthSea::German_EEZ, colour = \"black\", fill= NA, lwd = 0.5)+\n  geom_sf(data = GermanNorthSea::German_coast, colour = \"black\", fill= NA,alpha=0.9, lwd = 0.5,linetype=\"dashed\")+\n  geom_sf(data = GermanNorthSea::German_land, colour = '#9a8c98', fill = '#9a8c98')+\n\n  ## OWF\n  geom_sf(data = OWF_After2016,  colour = NA,fill= \"#bb3e03\",alpha=0.9, size=1,linetype=\"dashed\")+  \n  geom_sf(data = OWF_Before2016,  colour = \"#ffb703\",fill= \"#ffb703\",alpha=0.9, size=1)+ \n  \n  \n  coord_sf(xlim = c(3900000,4250000), ylim = c(3350000,3680000),\n                    label_axes = list(left = \"N\", bottom = 'E'))\nOWF_1plot"
  },
  {
    "objectID": "blog/2025-07-01-owf/owf.html#names",
    "href": "blog/2025-07-01-owf/owf.html#names",
    "title": "Offshore Wind Farms",
    "section": "Names",
    "text": "Names\nThere is an option using ggrepel, but here I manually include names of the OWF using annotation.\nFirst, create a data frame with the coordinates and the segment.\n\nLabels<-data.frame(text_x=c(4010000,4010000,4141000,4179000,4211000,4211000,4211000,4010000,4010000,4010000,4010000),\n           text_y= c(3479000,3494000,3605000,3585000,3494000,3486000,3478000,3449000,3439000,3429000,3405000),\n           text_label=c(\"BARD\",\"GTI\",\"DT\",\"BT\",\"AMW\",\"NSO\",\"MSO\",\"TRI\",\"AV\",\"BR\",\"RG\"),\n           segment_xstart=c(4020000,4018000,4141000,4179000,4178000,4177000,4178000,4020000,4020000,4020000,4020000),\n           segment_xend=c(4055000,4081000,4141000,4179000,4201000,4201000,4201000,4083000,4097000,4089000,4085000),\n           segment_ystart=c(3479000,3494000,3578000,3558000,3492000,3486000,3479000,3444000,3439000,3435000,3405000),\n           segment_yend=c(3479000,3494000,3594000,3574000,3492000,3486000,3479000,3444000,3439000,3435000,3405000)\n)\n\nThen add it one by one to the plot. You can skip this step if you dont need the names.\n\nOWF_2plot<-OWF_1plot + \n  #BARD\n  annotate(\"text\", x = Labels$text_x[1], y = Labels$text_y[1], label = Labels$text_label[1],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[1], xend = Labels$segment_xend[1],\n           y = Labels$segment_ystart[1], yend = Labels$segment_yend[1],colour = \"black\")+\n  #GTI\n  annotate(\"text\", x = Labels$text_x[2], y = Labels$text_y[2], label = Labels$text_label[2],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[2], xend = Labels$segment_xend[2],\n           y = Labels$segment_ystart[2], yend = Labels$segment_yend[2],colour = \"black\")+\n  #Dan Tysk\n  annotate(\"text\", x = Labels$text_x[3], y = Labels$text_y[3], label = Labels$text_label[3],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[3], xend = Labels$segment_xend[3],\n           y = Labels$segment_ystart[3], yend = Labels$segment_yend[3],colour = \"black\")+\n  #Butendiek\n  annotate(\"text\", x = Labels$text_x[4], y = Labels$text_y[4], label = Labels$text_label[4],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[4], xend = Labels$segment_xend[4],\n           y = Labels$segment_ystart[4], yend = Labels$segment_yend[4],colour = \"black\")+\n  #Amrum bank west\n  annotate(\"text\", x = Labels$text_x[5], y = Labels$text_y[5], label = Labels$text_label[5],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[5], xend = Labels$segment_xend[5],\n           y = Labels$segment_ystart[5], yend = Labels$segment_yend[5],colour = \"black\")+\n  # NSO\n  annotate(\"text\", x = Labels$text_x[6], y = Labels$text_y[6], label = Labels$text_label[6],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[6], xend = Labels$segment_xend[6],\n           y = Labels$segment_ystart[6], yend = Labels$segment_yend[6],colour = \"black\")+\n  # MSO\n  annotate(\"text\", x = Labels$text_x[7], y = Labels$text_y[7], label = Labels$text_label[7],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[7], xend = Labels$segment_xend[7],\n           y = Labels$segment_ystart[7], yend = Labels$segment_yend[7],colour = \"black\")+\n  # TRI\n  annotate(\"text\", x = Labels$text_x[8], y = Labels$text_y[8], label = Labels$text_label[8],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[8], xend = Labels$segment_xend[8],\n           y = Labels$segment_ystart[8], yend = Labels$segment_yend[8],colour = \"black\")+\n  # AV\n  annotate(\"text\", x = Labels$text_x[9], y = Labels$text_y[9], label = Labels$text_label[9],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[9], xend = Labels$segment_xend[9],\n           y = Labels$segment_ystart[9], yend = Labels$segment_yend[9],colour = \"black\")+\n  # BR\n  annotate(\"text\", x = Labels$text_x[10], y = Labels$text_y[10], label = Labels$text_label[10],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[10], xend = Labels$segment_xend[10],\n           y = Labels$segment_ystart[10], yend = Labels$segment_yend[10],colour = \"black\")+\n  # RG\n  annotate(\"text\", x = Labels$text_x[11], y = Labels$text_y[11], label = Labels$text_label[11],size=3)+\n  annotate(\"segment\", x = Labels$segment_xstart[11], xend = Labels$segment_xend[11],\n           y = Labels$segment_ystart[11], yend = Labels$segment_yend[11],colour = \"black\")+\n  NULL\nOWF_2plot"
  },
  {
    "objectID": "blog/2025-07-01-owf/owf.html#theme",
    "href": "blog/2025-07-01-owf/owf.html#theme",
    "title": "Offshore Wind Farms",
    "section": "Theme",
    "text": "Theme\nTo reduce noise from the grid, the background colors and the labels, give elements in the theme().\n\nOWF_3plot<-OWF_2plot + \n  scale_x_continuous(breaks = c(4,6,8),labels = function(x) paste0(x, '\\u00B0')) +\n  scale_y_continuous(breaks = c(53.5,54.5,55.5),labels = function(x) paste0(x, '\\u00B0'))  +\n  \n  theme(\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  panel.background = element_rect(fill = '#AFDEE8'),\n  panel.border = element_rect(colour = \"black\", fill=NA, size=1.5),\n  \n  axis.text.x = element_text(size=10,vjust = 12,color='#3d5a80'),\n  axis.text.y = element_text(color='#3d5a80',size=10,margin = margin(0,-1.30,0,1, unit = 'cm')),\n  axis.title = element_blank(),\n  axis.ticks.length=unit(-0.20, \"cm\"),\n  \n  legend.position='none',\n  legend.spacing.y = unit(0.05, 'cm'),\n  legend.text=element_text(size=10),\n  legend.background = element_rect(fill='transparent',colour =\"transparent\"),\n  legend.box.background = element_rect(fill='transparent',colour =\"transparent\"),\n  legend.key = element_rect(fill = \"transparent\", colour = \"transparent\")\n  )+\n  \n  NULL\nOWF_3plot"
  },
  {
    "objectID": "blog/2025-07-01-owf/owf.html#title",
    "href": "blog/2025-07-01-owf/owf.html#title",
    "title": "Offshore Wind Farms",
    "section": "Title",
    "text": "Title\nUsing the package ggtext, we can add a text with different colors.\n\nlibrary(ggtext)\n\n\nOWF_3plot +\n  geom_richtext(aes(x =  3895000, y = 3669000,\n  label = \"Offshore Wind farms in production\n  <span style='color:#ffb400'>from 2009 to 2016</span>\n  and\n  <span style='color:#bb3e03'>from 2017 to 2020</span>\"), \n  size=4, \n  fill = NA, \n  label.color = NA, # remove background and outline\n  hjust = 0,\n  vjust= 0,\n  inherit.aes = TRUE\n  )+\n  NULL"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html",
    "href": "blog/2025-08-04-oil/oil.html",
    "title": "Oil and Gas Offshore Installations",
    "section": "",
    "text": "In this month’s blog post, I dive into the world of oil and gas infrastructure in the German North Sea. Using openly available geospatial data from EMODnet, I downloaded and analyzed datasets related to offshore installations and pipelines. Step by step, I walk through the process of transforming raw data into a map. Creating this visualization not only helped me better understand the spatial layout of these industrial structures, but also shed light on why a particular proposed site has drawn criticism. The proximity to ecologically sensitive areas like Borkum Reef raises important questions, questions that are best understood when we can actually see the data."
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#map",
    "href": "blog/2025-08-04-oil/oil.html#map",
    "title": "Oil and Gas Offshore Installations",
    "section": "Map",
    "text": "Map\nUse ggplot to visualize the information where this infrastructures occur.\n\nlibrary(ggplot2)\n\n\nggplot() +\n  geom_sf(data = Oil_shapefile)"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#filter",
    "href": "blog/2025-08-04-oil/oil.html#filter",
    "title": "Oil and Gas Offshore Installations",
    "section": "Filter",
    "text": "Filter\nThe OSPAR commission source covers data for Germany, Ireland, Spain (Atlantic Sea), while for Italy data have been collected and harmonized from the Italian Ministry of Economic Development, for Denmark from the Danish Energy Agency, for the Netherlands from the TNO - Geological Survey of the Netherlands, for Croatia from the Croatian Hydrocarbon Agency, for Norway from the Norwegian Petroleum Directorate, for the UK from the Oil and Gas Authority (surface infrastructures), for Polish and Russian installations in the Baltic Sea from Marine Traffic and Helcom, finally from Marine Traffic come the data for Bulgarian, Russian and Ukrainian installations in the Black Sea and for Lybian and Spanish installations in the Mediterranean Sea.\n\nunique(Oil_shapefile$COUNTRY)\n\nLoad tidyverse to make a filter.\n\nlibrary(tidyverse)\n\nKeep only Germany data.\n\nOil_germany<-Oil_shapefile %>%\n  filter(COUNTRY == 'Germany')\n\nUse geom_sf to visualize the points. There are 3 data points for Germany.\n\nggplot() +\n  geom_sf(data = Oil_germany)"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#places",
    "href": "blog/2025-08-04-oil/oil.html#places",
    "title": "Oil and Gas Offshore Installations",
    "section": "Places",
    "text": "Places\nCreate a base map using shapefiles from the package GermanNorthSea.\n\nlibrary(GermanNorthSea)\n\nAdd the attributes and the theme to your base map.\n\nOil_germany<-st_transform(Oil_germany,4326)\nGerman_EEZ<-st_transform(German_EEZ,4326)\nGerman_land<-st_transform(German_land,4326)\nGerman_SCA<-st_transform(German_SCA,4326)\nGerman_natura<-st_transform(German_natura,4326)\n\n\nBase_map<-ggplot() +\n  geom_sf(data = Oil_germany)+ \n  # Fill colors\n  geom_sf(data = German_EEZ, color='#43585E',fill='transparent',alpha=0.1, linewidth = 1)+\n  geom_sf(data = German_land, colour = '#43585E', fill = '#43585E')+\n  \n  geom_sf(data = German_SCA, colour = '#43585E', fill = '#40916c', \n          linewidth=0.1, linetype = \"dashed\",alpha=0.3)+\n  geom_sf(data = German_natura, colour = '#43585E', fill = '#40916c', \n          linewidth=0.1, linetype = \"dashed\",alpha=0.3)+\n  \n  scale_x_continuous(breaks = c(4,6,8),labels = function(x) paste0(x, '\\u00B0')) +\n  scale_y_continuous(breaks = c(53.5,54.5,55.5),labels = function(x) paste0(x, '\\u00B0'))  +\n  \n  theme(\n  axis.text.x = element_text(size=10,vjust = 12,color='black'),\n  axis.text.y = element_text(color='black',size=10,margin = margin(0,-1.30,0,1, unit = 'cm')),\n  axis.title = element_blank(),\n  axis.ticks.length=unit(-0.20, \"cm\"),\n  panel.grid.major = element_blank(),\n  panel.grid.minor = element_blank(),\n  panel.background = element_rect(fill = '#F2F2F2'))+\n  \n  xlab('Longitude')+ylab('Latitude')+\n  \n  theme(panel.border = element_rect(colour = \"black\", fill=NA, linewidth = 1.5))+\n  coord_sf(ylim = c(53,56), xlim = c(3,9),\n                    label_axes = list(left = \"N\", bottom = 'E'))\n\nUsing annotate, add the names of the platforms.\n\nOil_1plot<-Base_map+\n  annotate(\"text\", \n           x = 3.98639-0.95, y = 55.82222, label = \"A6-A\",size=5,colour =\"#bb3e03\")+\n  annotate(\"segment\", \n           x = 3.98639, xend = 3.98639-0.7,\n           y =  55.82222-0.02, yend = 55.82222-0.02,colour = 'black', linewidth=1)+\n  annotate(\"text\", \n           x = 8.73111-1, y = 54.02583, label =\"Mittelplate A\",size=5,color=\"#ffb400\")+\n  annotate(\"segment\", \n           x =  8.73111, xend = 8.73111-0.4,\n           y = 54.02583, yend =  54.02583, color= 'black', linewidth=1)+\n  NULL\n\nMittleplate A\nMittelplate is Germany’s largest oil field, located 7 km (4.3 mi) offshore in the ecologically sensitive tidal flats of the Schleswig-Holstein Wadden Sea National Park. The field was developed by a joint venture between RWE Dea and Wintershall. By the 20th anniversary of production, the field had yielded approximately 20 million tonnes (22 million tons), or about 146 million barrels, of crude oil. Mittelplate contains nearly 65% of Germany’s total crude oil reserves. Source: Wikipedia\n\n\n  \n\n\nImage showing Mittleplate A oil field.\nA6-A\nA6/B4 is Germany’s only operational offshore gas field, located about 300 km off the coast in the North Sea, within Germany’s exclusive economic zone. Discovered in 1974 and producing since 2000, it supplies around 5% of Germany’s natural gas. By the end of 2006, it had produced 6.7 billion cubic meters. Operated by the German North Sea Consortium, with Wintershall Noordzee B.V. managing production, the platform sits in 48 meters of water and typically hosts ten workers. Gas and condensate are piped to a Dutch platform, where the condensate is shipped and the gas sent to the mainland via the NOGAT pipeline. Source: Wikipedia\n\n\n  \n\n\nImage showing A6-A Offshore gas field."
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#filter-1",
    "href": "blog/2025-08-04-oil/oil.html#filter-1",
    "title": "Oil and Gas Offshore Installations",
    "section": "Filter",
    "text": "Filter\nThe pipelines data set from EMODnet contains different types.\n\nunique(Pipelines_shapefile$MEDIUM)\n\nFor this exercise select only those containing gas.\n\nPipelines_gas<-Pipelines_shapefile %>%\n  filter(MEDIUM %in% c(\"Gas\", \"Gas, Water, Air\",\"Gas, Water\",\"Oil\",\"Gas, Oil\"))\n\nThe data set also contains data from different countries.\n\nunique(Pipelines_gas$COUNTRY)\n\nFor this exercise, select Germany and surrounding countries.\n\nPipelines_crossing_germany<-Pipelines_gas %>%\n  filter(COUNTRY %in% c(\"Germany, Russia\", \"Germany\",\n                        \"Netherlands\",\"United Kingdom\"))"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#map-1",
    "href": "blog/2025-08-04-oil/oil.html#map-1",
    "title": "Oil and Gas Offshore Installations",
    "section": "Map",
    "text": "Map\nAdd a geom_sf in the previous plot to visualize the gas pipelines.\n\nOil_2plot<-Oil_1plot +\n  geom_sf(data = Pipelines_gas, alpha=0.08, colour =\"#bb3e03\")+\n  coord_sf(ylim = c(53,56), xlim = c(3,9),\n                    label_axes = list(left = \"N\", bottom = 'E'))"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#text",
    "href": "blog/2025-08-04-oil/oil.html#text",
    "title": "Oil and Gas Offshore Installations",
    "section": "Text",
    "text": "Text\nThe package ggtext allows to add colors into labels.\n\nlibrary(ggtext)\n\nAdd the title on the map.\n\nOil_3plot<-Oil_2plot +\n  geom_richtext(aes(x =  4.5, y = 55.5,\n  label = \"Offshore installations for exploration, <br> \n  exploitation or transportation of<br>\n  <span style='color:#ffb400'>Oil</span>\n  and\n  <span style='color:#bb3e03'>Gas (including pipelines) </span> <br>\n  in the German North Sea\"), \n  size = 5, \n  fill = NA, \n  label.color = NA, # remove background and outline\n  hjust = 0,\n  vjust= 0,\n  inherit.aes = TRUE\n  )+\n  NULL"
  },
  {
    "objectID": "blog/2025-08-04-oil/oil.html#borkum-n05-a",
    "href": "blog/2025-08-04-oil/oil.html#borkum-n05-a",
    "title": "Oil and Gas Offshore Installations",
    "section": "Borkum + N05-A",
    "text": "Borkum + N05-A\nOn July 2, 2025, the German federal cabinet approved a treaty that permits Dutch-led natural gas extraction extending into German territorial waters near Borkum. The initiative is intended to enhance energy security and meet commitments outlined in the governing coalition’s energy strategy. However, environmental organizations have raised concerns, warning that the project poses risks to the Wadden Sea, undermines climate objectives, and lacks adequate public scrutiny and legal oversight. The agreement still requires legislative ratification and is subject to ongoing judicial review. Source: Tagesschau.\nThe N05-A platform is situated in Dutch waters, approximately 1.5 kilometers from the German maritime border. By autumn 2024, the first well is expected to be drilled, enabling natural gas extraction from the Dutch sector of the North Sea. Source: Project GEMS, Spiegel.\nThe proposed gas field is located in close proximity to the Borkum Reef Ground NCA. This area is the smallest of three designated nature conservation areas within Germany’s Exclusive Economic Zone (EEZ) in the North Sea. It has been recognized as a Special Area of Conservation (SAC) under the EU Habitats Directive, and was officially designated a German NCA in 2017. Sources: Borkum Reef Ground NCA, Oceana.\n\nOil_4plot<-Oil_3plot+\n  geom_point(aes(x = 6.3620, y = 53.67800), color = 'orange',size=4,shape=17)+\n    annotate(\"text\", \n           x = 6.3620-0.5, y = 53.678, label = \"N05-A\",size=4,colour ='orange')+\n    annotate(\"segment\", \n           x = 6.3620, xend = 6.3620-0.2,\n           y =  53.678, yend = 53.678,colour = 'orange', linewidth=1)+\n  \n  annotate(\"text\", \n           x = 6.70-1.6, y = 53.89, label = \"Borkum Reef Ground\",size=4,colour ='#2d6a4f')+\n  annotate(\"segment\", \n           x = 6.70-0.4, xend = 6.70-0.8,\n           y =  53.89, yend = 53.89,colour = '#2d6a4f', linewidth=1)\nOil_4plot"
  },
  {
    "objectID": "blog/2025-09-01-cables/cables.html",
    "href": "blog/2025-09-01-cables/cables.html",
    "title": "Underwater Power and Telecomunication Cables",
    "section": "",
    "text": "In this month’s blog post, I take a closer look at the network of underwater cables stretching across the German North Sea. Using openly available geospatial data from EMODnet, I downloaded and worked with datasets covering both telecommunication and power cables. With R as my main analysis tool, I walk you through the process of exploring, cleaning, and visualizing the data. Building this map deepened my understanding of how these often-invisible infrastructures are distributed across the seafloor.\n\n\nUnderwater (submarine, or undersea) cables include cables use for telecommunication and for power. Although limited impacts have been found, the disturbance of the seabed during installation can disrupt benthic communities. Power cables additionally emit electromagnetic fields (EMFs) which might affect sensitive species such as migratory animals. Furthermore, these cables can warm the water surrounding them, but their effects by this are poorly known (see compilation of effects of cables in: Lloret et al. 2022, Hale et al. 2024)\n\n\n   \n\n\nImage from a underwater cable from BBC\nWhile it’s difficult to pinpoint an exact annual number, estimates suggest that hundreds of kilometers of new submarine cables are installed each year to meet the growing global demand for internet and telecommunications. However, the number of new cables installed varies significantly each year, with the total number of operational and planned cables exceeding 600 in early 2025.\n\n\n  \n\n\nImage from the installation of undersea cable in waters from the Hiddensee island at Germany Mecklenburg-Western Pomerania Baltic Sea from Energy Industry Review"
  },
  {
    "objectID": "blog/2025-09-01-cables/cables.html#effects",
    "href": "blog/2025-09-01-cables/cables.html#effects",
    "title": "Underwater Power and Telecomunication Cables",
    "section": "Effects",
    "text": "Effects\n\nViking Link 2017 - Farr et al. 2021 - Lloret et al. 2022 - Middleton et al 2023 - Hale et al 2024 - Buck et al 2024"
  },
  {
    "objectID": "blog/2025-09-01-cables/cables.html#telecommuncations",
    "href": "blog/2025-09-01-cables/cables.html#telecommuncations",
    "title": "Underwater Power and Telecomunication Cables",
    "section": "Telecommuncations",
    "text": "Telecommuncations\n\nOcean Cables Map - Submarine networks - IOEMA Fibre optic"
  },
  {
    "objectID": "blog/2025-09-01-cables/cables.html#power",
    "href": "blog/2025-09-01-cables/cables.html#power",
    "title": "Underwater Power and Telecomunication Cables",
    "section": "Power",
    "text": "Power\n\nPower cable installations connected to Offshore Wind farms - NordLink"
  },
  {
    "objectID": "blog/2025-09-01-cables/cables.html#both-1",
    "href": "blog/2025-09-01-cables/cables.html#both-1",
    "title": "Underwater Power and Telecomunication Cables",
    "section": "Both",
    "text": "Both\n\nSubmarine cable map - How do the submarine cables get installed - Video - Cable instalation"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Underwater Power and Telecomunication Cables\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this month’s blog post, I map the underwater cable network of the German North Sea using open data from EMODnet. With R, I explore and visualize both telecommunication and power cables.\n\n\n\n\n\n\nSep 1, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nOil and Gas Offshore Installations\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this month’s blog post, we’ll explore oil and gas infrastructure in the German North Sea, by using EMODnet geospatial data to map offshore installations and pipelines, as well as focusing on a site near the ecologically sensitive Borkum Reef, revealing why recently proposed projects there have sparked environmental concern.\n\n\n\n\n\n\nAug 4, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nOffshore Wind Farms\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nThis blog post demonstrates how to visualize offshore wind farm data in the German North Sea using R. It covers data download, exploration, mapping with ggplot2, and calculating areas developed before 2016.\n\n\n\n\n\n\nJul 1, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nShipping traffic\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this blog post, I demonstrate how to visualize shipping traffic data using R. The tutorial covers downloading the dataset from EMODnet, performing exploratory data analysis, and creating a map using ggplot2.\n\n\n\n\n\n\nJun 2, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nLight pollution\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this month’s post, I’ll show you how to create a map using radiance data, often associated with light pollution, collected by the Visible Infrared Imaging Radiometer Suite (VIIRS).\n\n\n\n\n\n\nMay 5, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nSea surface temperature\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this blog post, I walk you through the process of visualizing sea surface temperature in R. From downloading the dataset to reading it and creating a map using ggplot.\n\n\n\n\n\n\nApr 7, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nFishing effort\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this blog post, I walk you through the process of visualizing Global Fishing Watch data in R, covering from downloading the dataset to reading it and creating a map using ggplot.\n\n\n\n\n\n\nMar 3, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nDistance to coast\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nIn this blog post, I share a step-by-step guide on how to use raster data from distance to the coast. I walk you through the steps I used using the North German Sea as an example.\n\n\n\n\n\n\nFeb 20, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nBathymetry\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2025\n\n\n\n\nHere are the steps I used for creating a bathymetric map in R. From where to download bathymetric data to how to read it and plot it in R.\n\n\n\n\n\n\nJan 10, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\ntmap\n\n\n\n\n\n\n\nR\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nCreate an interactive map to explore your data.\n\n\n\n\n\n\nDec 4, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nComplete or incomplete trips\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\n\n\nIdentify trips with large gaps and classify the trip as complete or incomplete.\n\n\n\n\n\n\nNov 5, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nDistance between consecutive points\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nThis posts allows to calculate distance between consecutive locations.\n\n\n\n\n\n\nOct 8, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nIdentify events\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nAssign a number to each event.\n\n\n\n\n\n\nSep 19, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nRemove undesired locations\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nCreate a buffer to remove locations.\n\n\n\n\n\n\nAug 1, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nInterpolate a path\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nDoing a linear interpolation of tracks of animals.\n\n\n\n\n\n\nJul 5, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nDistance from point\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nCalculate distance from a point.\n\n\n\n\n\n\nJun 4, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nUsing magick for image manipulation\n\n\n\n\n\n\n\nR\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nAdd text and margins on images.\n\n\n\n\n\n\nMay 2, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nCreate a buffer\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nThis post is about how to create a spatial buffer of 1 km around a point.\n\n\n\n\n\n\nApr 4, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nSecondary-axis environmental plot\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nCreate a secondary-axis plot from SST and CHL.\n\n\n\n\n\n\nMar 11, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nEnvironmental variables\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nDownload and plot SST data from a specific period.\n\n\n\n\n\n\nFeb 6, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nusing arrows\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nThis post is on how to use arrows in a plot.\n\n\n\n\n\n\nDec 4, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nsecondary x title\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nThis post is on how to articially create a secondary x title.\n\n\n\n\n\n\nNov 2, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nInside legend\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate a custom legend using annotations of text and rectangles inside the plot.\n\n\n\n\n\n\nOct 2, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nReference legend multiplots\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate a plot to be use as reference legend for multiple plots\n\n\n\n\n\n\nSep 1, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nCustom legends in a map\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nPlace the legend inside the map and custom the legend title\n\n\n\n\n\n\nAug 2, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nCustom points in a map\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nPlot different size, color and shape points\n\n\n\n\n\n\nJul 13, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\ngganimate\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate an animation of your tracks.\n\n\n\n\n\n\nJun 1, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nGithub page presentations\n\n\n\n\n\n\n\nR\n\n\nGit\n\n\nEnglish\n\n\nY2023\n\n\n\n\nPublish your slides from a html file.\n\n\n\n\n\n\nMay 5, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nGrid, Raster, Colors\n\n\n\n\n\n\n\nR\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate a grid, then a raster, and plot them with your custom colors.\n\n\n\n\n\n\nApr 6, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nMapping in R\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate a map of Europe in ggplot2.\n\n\n\n\n\n\nMar 4, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nSubset shapefile\n\n\n\n\n\n\n\nEnglish\n\n\nR\n\n\nY2023\n\n\n\n\nExtract a specific polygon from a shapefile and export it as new shapefile.\n\n\n\n\n\n\nFeb 4, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nCustom made polygon\n\n\n\n\n\n\n\nQGIS\n\n\nBiologging\n\n\nEnglish\n\n\nY2023\n\n\n\n\nCreate a polygon in QGIS using google maps as background\n\n\n\n\n\n\nJan 23, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nCreate a calendar\n\n\n\n\n\n\n\nR\n\n\nggplot2\n\n\nEnglish\n\n\nY2024\n\n\ntracking\n\n\n\n\nThis post is to create a calendar.\n\n\n\n\n\n\nJan 15, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to my site",
    "section": "",
    "text": "About\nLearn a little bit about me, my interests and find my contact information at the about section. \n\n\n Publications\nYou can find abstracts and links to my publications. If you can’t access a publication please don’t hesitate to contact me. \n\n\n Teaching\nIn this section, you will find a variety of topics that you might find interesting, such as AI tools, tracking functions, and selecting the right journal, among others. I’ve also prepared materials for teaching R, a programming language for statistical computing and graphics. If you’re interested in accessing these resources, you can locate them here. \n\n\n Packages\nI develop R packages that are useful for my work. I’m often working on new packages so stay tuned. \n\n\n Blog\nI blog about what I consider are useful topics and can help other people. I write mostly about R and QGIS, but some of my talks are there. I blog in English and Spanish."
  },
  {
    "objectID": "packages/2021-05-14-spheniscus/spheniscus.html",
    "href": "packages/2021-05-14-spheniscus/spheniscus.html",
    "title": "spheniscus",
    "section": "",
    "text": "Intro\nEl objetivo de este paquete es:\n- Hacer disponibles datos crudos de TDR para que se familiaricen con el formato.\n- Ayudarte a limpiar los datos de TDR para obtener parámetros de buceo de los animales muestreados.\nInstrucciones en ingles: https://github.com/MiriamLL/spheniscus\n\n\nInstalación\nEl paquete estará disponible solo por GitHub\n\ninstall.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/spheniscus\")\n\n\nlibrary(spheniscus)\n\n\n\nEjemplo\nCrea un grafico con el perfil de buceos. Marca el cero con una linea roja.  El objetivo de este gráfico es que te permita decidir si debes corregir el cero.\n\nplot_depth(TDR_trip = TDR_trip,\n                   depth_column='Pressure',\n                   time_column='daytime')\n\n\n\n\n\n\nCitar\n\nLerma, M (2021). Package spheniscus (Version v1.0). Zenodo. http://doi.org/10.5281/zenodo.4709837\n\n\n\n\nDOI"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html",
    "href": "packages/2021-05-14-sula/sula.html",
    "title": "sula",
    "section": "",
    "text": "Este paquete contiene:\n\nDatos de tracks de kena (Sula dactylatra) colectados en Rapa Nui para replicar los ejemplos 🗿\nTrece funciones para limpiar y calcular parámetros de viajes a partir de datos GPS Detailed information and uses: https://github.com/MiriamLL/sula\n\n\n\nPuedes instalar este paquete desde GitHub usando:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/sula\")"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#un-individuo",
    "href": "packages/2021-05-14-sula/sula.html#un-individuo",
    "title": "sula",
    "section": "Un individuo",
    "text": "Un individuo\nCarga los datos de GPS de un individuo.\n\nhead(GPS_01)\n\nNota Incluye columna con fecha y hora en formato POSIXct"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#notas-de-campo",
    "href": "packages/2021-05-14-sula/sula.html#notas-de-campo",
    "title": "sula",
    "section": "Notas de campo",
    "text": "Notas de campo\nIncluye el periodo cuando se colocó el dispositivo hasta cuando se retiró.\n\nNotas<-Notas\n\nNota: no corresponden al periodo real de muestreo. Se proveen estos datos para practicar las funciones."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#ajustar_hora",
    "href": "packages/2021-05-14-sula/sula.html#ajustar_hora",
    "title": "sula",
    "section": "ajustar_hora",
    "text": "ajustar_hora\nEsta función corrige el tiempo de acuerdo a la zona horaria, se necesita especificar los datos GPS, el nombre de la columna que contiene datos de hora y día, el formato en el que están éstos datos, y el número de horas de diferencia a corregir de acuerdo al GMT.\n\nGPS_gmt<-ajustar_hora(GPS_data = GPS_raw,\n                      dia_col = 'DateGMT',\n                      hora_col = 'TimeGMT',\n                      formato=\"%d/%m/%Y %H:%M:%S\",\n                      dif_hor = 5)\n\nRegresa el mismo data frame con dos columnas adicionales: dia_hora con el día y fecha original y hora_corregida con la hora correspondiente al GMT."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#recortar_periodo",
    "href": "packages/2021-05-14-sula/sula.html#recortar_periodo",
    "title": "sula",
    "section": "recortar_periodo",
    "text": "recortar_periodo\nEste función permite recortar periodos dentro de los datos.\n\nGPS_recortado<-recortar_periodo(GPS_data=GPS_01,\n                                inicio='02/11/2017 18:10:00',\n                                final='05/11/2017 14:10:00',\n                                dia_col='DateGMT',\n                                hora_col='TimeGMT',\n                                formato=\"%d/%m/%Y %H:%M:%S\")\n\nNota: El formato de tiempo y hora debe ser el mismo formato que el formato de inicio y final."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#localizar_nido",
    "href": "packages/2021-05-14-sula/sula.html#localizar_nido",
    "title": "sula",
    "section": "localizar_nido",
    "text": "localizar_nido\nEsta función usa el primer valor de los datos de GPS como punto de la colonia, sirve para identificar la localización del nido por individuo. Regresa un nuevo data frame con dos columnas: Latitude y Longitude correspondientes a la localización del nido.\n\nnest_loc<-localizar_nido(GPS_data = GPS_01,\n                          lat_col=\"Latitude\",\n                          lon_col=\"Longitude\")\n\nNota Asume que los datos del nido corresponde al primer registro de GPS."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#identificar_viajes",
    "href": "packages/2021-05-14-sula/sula.html#identificar_viajes",
    "title": "sula",
    "section": "identificar_viajes️",
    "text": "identificar_viajes️\nEsta función agrega una columna de acuerdo a distancia de la colonia para determinar si esta en un viaje de alimentación o no.\n\nGPS_trip<-identificar_viajes(GPS_data=GPS_01,\n                        nest_loc=nest_loc,\n                        distancia_km=1)\n\nEn la columna llamada trip:\nN=dentro de la distancia considerada como no viaje de alimentación, y\nY=viaje de alimentación."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#contar_viajes",
    "href": "packages/2021-05-14-sula/sula.html#contar_viajes",
    "title": "sula",
    "section": "contar_viajes",
    "text": "contar_viajes\nEsta función agrega una columna con el número del viaje y elimina locaciones dentro de el radio de la colonia.\n\nGPS_edited<-contar_viajes(GPS_data=GPS_trip)"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#dist_colonia",
    "href": "packages/2021-05-14-sula/sula.html#dist_colonia",
    "title": "sula",
    "section": "dist_colonia",
    "text": "dist_colonia\nAgrega una columna con la distancia de la colonia de cada punto. Regresa el mismo data frame con una nueva columna llamada ’maxdist_km.\n\nGPS_dist<-dist_colonia(GPS_edited = GPS_edited, \n                       nest_loc=nest_loc)\n\nNota usa CRS: 4326. Enlaces: ¿referencia geográfica?, ¿cual usar?"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#dist_puntos",
    "href": "packages/2021-05-14-sula/sula.html#dist_puntos",
    "title": "sula",
    "section": "dist_puntos",
    "text": "dist_puntos\nAgrega una columna con la distancia entre cada punto. Regresa el mismo data frame con una nueva columna llamada ‘pointsdist_km’.\n\nGPS_dist<-dist_puntos(GPS_data = GPS_edited,\n                      separador='trip_number')\n\nNota usa CRS: 4326. Incluye NAs al inicio del viaje. Enlaces: ¿referencia geográfica?, ¿cual usar?"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#calcular_duracion",
    "href": "packages/2021-05-14-sula/sula.html#calcular_duracion",
    "title": "sula",
    "section": "calcular_duracion ⏳",
    "text": "calcular_duracion ⏳\nIdentifica el inicio y el final del viaje y calcula la duración. Regresa un nuevo data frame con 4 columnas: trip_id, trip_start, trip_end y duration.\n\nduracion<-calcular_duracion(GPS_data = GPS_edited,\n                            col_diahora = \"tStamp\",\n                            formato = \"%Y-%m-%d %H:%M:%S\",\n                            unidades=\"hours\",\n                            separador=\"trip_number\")\n\nNota la duración se calcula en valores númericos."
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#calcular_totaldist",
    "href": "packages/2021-05-14-sula/sula.html#calcular_totaldist",
    "title": "sula",
    "section": "calcular_totaldist",
    "text": "calcular_totaldist\nCalcula distancia recorrida de la colonia por viaje.\nDebe contener la columna Longitude y Latitude con estos nombres.\nRegresa un nuevo data frame con la distancia total recorrida por viaje.\n\ntotaldist_km<-calcular_totaldist(GPS_data= GPS_edited,\n                                 separador=\"trip_number\")"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#calcular_maxdist",
    "href": "packages/2021-05-14-sula/sula.html#calcular_maxdist",
    "title": "sula",
    "section": "calcular_maxdist",
    "text": "calcular_maxdist\nObtiene la distancia máxima de la colonia por viaje.\nDebe contener la columna Longitude y Latitude con estos nombres.\nRegresa un nuevo data frame con la distancia máxima de la colonia por viaje.\n\nmaxdist_km<-calcular_maxdist(GPS_data = GPS_edited, \n                             nest_loc=nest_loc,\n                             separador=\"trip_number\")"
  },
  {
    "objectID": "packages/2021-05-14-sula/sula.html#calcular_tripparams",
    "href": "packages/2021-05-14-sula/sula.html#calcular_tripparams",
    "title": "sula",
    "section": "calcular_tripparams",
    "text": "calcular_tripparams\nCalcula la duración de los viajes, la distancia máxima de la colonia y la distancia total recorrida. Regresa un nuevo data frame con los parámetros por viaje.\n\ntrip_params<-calcular_tripparams(GPS_data = GPS_edited,\n                              diahora_col = \"tStamp\",\n                              formato = \"%Y-%m-%d %H:%M:%S\",\n                              nest_loc=nest_loc,\n                              separador=\"trip_number\")"
  },
  {
    "objectID": "packages/2023-04-16-seamonas/seamonas.html",
    "href": "packages/2023-04-16-seamonas/seamonas.html",
    "title": "seamonas",
    "section": "",
    "text": "seamonas provides easy access to information based on guidelines for monitoring seabirds at sea. It includes detailed table content and a sample dataset to support implementation. Information based on the HELCOM Monitoring Guidelines for Seabirds at Sea ESAS database.\nDetailed information and uses: https://github.com/MiriamLL/seamonas"
  },
  {
    "objectID": "packages/2023-04-16-seamonas/seamonas.html#code_euring",
    "href": "packages/2023-04-16-seamonas/seamonas.html#code_euring",
    "title": "seamonas",
    "section": "Code_Euring",
    "text": "Code_Euring\n\nA list of 549 species names across 9 morphological separated groups.\n\n\ndata(Code_Euring)\n\nKey fields:\n\nCode: Numerical code based on Euring. The species codes are primarily based on the EURING list, with additional ‘uncertainty codes’ commonly used by ESAS partners to represent species groups that are often difficult to identify under at-sea field conditions.\nScientific_name: A scientific name is the standardized, universally accepted name used to identify and classify living organisms. It follows a system called binomial nomenclature.\nEnglish_name: Official common name of the species.\nArtificial_tax_class: A custom classification system based on taxonomic and morphological similarities among species.\n\nExamples of use\n\n\n\n\n\nCode\nScientific_name\nEnglish_name\nGroupping\n\n\n\n\n20\nGavia stellata\nRed-throated Diver\nDivers\n\n\n30\nGavia arctica\nBlack-throated Diver\nDivers\n\n\n40\nGavia immer\nGreat Northern Diver\nDivers\n\n\n50\nGavia adamsii\nWhite-billed Diver\nDivers\n\n\n59\nGavia spec.\nunidentified diver\nDivers\n\n\n60\nPodilymbus podiceps\nPied-billed Grebe\nGrebes"
  },
  {
    "objectID": "packages/2023-04-16-seamonas/seamonas.html#column_descriptions",
    "href": "packages/2023-04-16-seamonas/seamonas.html#column_descriptions",
    "title": "seamonas",
    "section": "Column_Descriptions",
    "text": "Column_Descriptions\n\nHarmonized column names and guidance for completing each entry.\n\n\ndata(Column_Descriptions)\n\nExamples of use\n\n\n\n\n\n\n\n\n\nObservations_Name\nObservations_Description\n\n\n\n\nABIOTIC_STRUCTURES\nNumerical codes specifying physical abiotic features. Includes ships and infrastructures such as wind farms."
  },
  {
    "objectID": "packages/2023-04-16-seamonas/seamonas.html#code_descriptions",
    "href": "packages/2023-04-16-seamonas/seamonas.html#code_descriptions",
    "title": "seamonas",
    "section": "Code_Descriptions",
    "text": "Code_Descriptions\n\nUnified descriptions for field entries, includes abiotic structures, activity codes, associations.\n\n\ndata(Code_Descriptions)\n\nExamples of use\n\n\n\n\n\nACTIVITY_CODE\nACTIVITY_DESCRIPTION\n\n\n\n\n0\nUnknown\n\n\n1\nSwimming\n\n\n2\nFlying\n\n\n3\nSubmerged\n\n\n4\nBreaching surface\n\n\n5\nAssociated with platform"
  },
  {
    "objectID": "packages/2023-06-02-germannorthsea/germannorthsea.html",
    "href": "packages/2023-06-02-germannorthsea/germannorthsea.html",
    "title": "GermanNorthSea",
    "section": "",
    "text": "The goal is provide easy access to shapefiles of the North Sea.\nThis package contains shapefiles from the German North Sea: \nDatailed information and uses: https://github.com/MiriamLL/GermanNorthSea\n\n\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/GermanNorthSea\")\n\n\nlibrary(GermanNorthSea)"
  },
  {
    "objectID": "packages/2023-06-02-germannorthsea/germannorthsea.html#base-maps",
    "href": "packages/2023-06-02-germannorthsea/germannorthsea.html#base-maps",
    "title": "GermanNorthSea",
    "section": "Base Maps",
    "text": "Base Maps\nFor using other CRS, you can use the function st_transform from the package sf.\n\nlibrary(sf)\n\nLinking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.3.1; sf_use_s2() is TRUE\n\n\n\nGerman_EEZ<-st_transform(German_EEZ, 4326)\nGerman_coast<-st_transform(German_coast, 4326)\nGerman_land<-st_transform(German_land, 4326)\nGerman_natura<-st_transform(German_natura, 4326)\n\n\nggplot()+\n  geom_sf(data = German_EEZ, colour = \"red\", fill= NA,alpha=0.9, lwd = 0.5)+\n  geom_sf(data = German_coast, colour = \"red\", fill= NA,alpha=0.9, lwd = 0.5,linetype=\"dashed\")+\n  geom_sf(data = German_land, colour = 'black', fill = '#ffffbe')+\n  geom_sf(data = German_natura, colour = \"#3d6d22\", fill= '#3d6d22',alpha=0.2, lwd = 0.5)+\n\n  ggspatial::annotation_north_arrow(location =\"bl\", which_north = \"true\", \n        pad_x = unit(0.05, \"in\"), \n        pad_y = unit(0.05, \"in\"),\n        \n        style = north_arrow_fancy_orienteering)+\n  \n  theme(\n  legend.spacing.y = unit(0.05, 'cm'),\n  legend.text=element_text(size=10),\n  legend.background = element_rect(fill='transparent',colour =\"transparent\"),\n  legend.box.background = element_rect(fill='transparent',colour =\"transparent\"),\n  legend.key = element_rect(fill = \"transparent\", colour = \"transparent\"),\n  panel.background = element_rect(fill = '#bde0fe'))+\n  \n  xlab('Longitude')+ylab('Latitude')+\n  \n  theme(panel.border = element_rect(colour = \"black\", fill=NA, linewidth = 1.5))+\n  \n  coord_sf(xlim = c(3,9), ylim = c(53,56),\n                    label_axes = list(top = \"E\", left = \"N\", bottom = 'E', right='N'))"
  },
  {
    "objectID": "packages/2025-07-03-larus/larus.html",
    "href": "packages/2025-07-03-larus/larus.html",
    "title": "larus",
    "section": "",
    "text": "This package offers tools for data manipulation, trip identification, and calculation of trip parameters like duration, maximum distance, and path length. Additionally, it supports trip interpolation.\nThere are three key issues in determining the foraging trips in GSMs attached to gulls:\n\nBattery charge and gaps (intervals) in the data.\nCentral locations might change, so foraging trips can be difficult to identify.\nThe gulls just do whatever they want.\nFor detailed instructions go to: https://github.com/MiriamLL/larus\n\n\n\nYou can install the development version of larus from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/larus\")\n\nLoad packages\n\nlibrary(larus)"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages",
    "section": "",
    "text": "seamonas\n\n\n\n\n\nA package that provides easy access to information based on guidelines for monitoring seabirds at sea.\n\n\n\n\n\n\nJun 23, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nlarus\n\n\n\n\n\nAn R package designed for working with GSM data.\n\n\n\n\n\n\nMar 7, 2025\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nGermanNorthSea\n\n\n\n\n\nA package compiling shapefiles from the German North Sea.\n\n\n\n\n\n\nJun 2, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nspheniscus\n\n\n\n\n\nA package that provides functions to clean the TDR data and to obtain diving parameters from the sampled individuals.\n\n\n\n\n\n\nMay 15, 2021\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nsula\n\n\n\n\n\nFunctions to clean your data and calculate the foraging trip parameters of the individuals.\n\n\n\n\n\n\nMay 15, 2021\n\n\nMiriam Lerma\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "My list of publications",
    "section": "",
    "text": "Here you can find abstracts and links to my publications.\nIf you can’t access a publication please don’t hesitate to contact me.\nYou can also find me on GoogleScholar and ResearchGate.\nMy ORCID is 0000-0002-7632-9289."
  },
  {
    "objectID": "publications.html#section",
    "href": "publications.html#section",
    "title": "My list of publications",
    "section": "2024",
    "text": "2024\n\n12. Variations in inter‐specific and sex‐related niche partitioning in pelagic boobies during their annual cycle\nAuthors: Lerma M, Dehnhard N, Castillo-Guerrero JA, Hernandez-Vazquez S, Voigt CC, Garthe S\nAbstract Animals that co-occur in a region (sympatry) may share the same environment (syntopy), and niche differentiation is expected among closely related species competing for resources. The masked booby (Sula dactylatra) and smaller congeneric red-footed booby (Sula sula) share breeding grounds. In addition to the inter-specific size difference, females of both species are also larger than the respective males (reversed sexual size dimorphism). Although both boobies consume similar prey, sometimes in mixed-species flocks, each species and sex may specialize in terms of their diet or foraging habitats. We examined inter- and intra-specific differences in isotopic values (δ13C and δ15N) in these pelagically feeding booby species during the incubation period at Clarion Island, Mexico, to quantify the degrees of inter- and intra-specific niche partitioning throughout the annual cycle. During incubation, both species preyed mainly on flyingfish and squid, but masked boobies had heavier food loads than red-footed boobies. There was no overlap in isotopic niches between masked and red-footed boobies during breeding (determined from whole blood), but there was slight overlap during the non-breeding period (determined from body feathers). Female masked boobies had a higher trophic position than conspecific males during breeding; however, no such pattern was detected in red-footed boobies. These results provide evidence of inter- and intra-specific niche partitioning in these tropical seabird species, particularly during the breeding period and in the more-dimorphic species. Our results suggest that these closely related species use different strategies to cope with the same tropical marine environment.\nRead more: Link to publication"
  },
  {
    "objectID": "publications.html#section-1",
    "href": "publications.html#section-1",
    "title": "My list of publications",
    "section": "2023",
    "text": "2023\n\n11. Corticosterone levels, leukocyte profiles, and foraging and diving behaviours of Humboldt penguins during chick rearing in Northern Chile\nAuthors: Lerma M, Villavicencio CP, Luna N, Portflitt-Toro M, Serratosa J, Luna-Jorquera G, Garthe S, Quispe R\nAbstract Understanding the physiology of stress in wild animals is essential for the conservation of species subject to anthropogenic perturbations. Humboldt penguins (Spheniscus humboldti) are exposed to increasing anthropogenic impacts in their natural habitat. In this species, females are typically smaller and dive less deep than males. In related species, the more limited foraging habitat of females and their reduced resiliency due to their smaller size were associated with higher mortality. We hypothesise that potential sex-specific differences in the foraging behaviour of Humboldt penguins may also relate to differences in their physiological stress. Here, we studied sex-specific foraging and diving behaviours and variations in plasma corticosterone levels and leukocyte profiles of Humboldt penguins during the chick-rearing period in Northern Chile. We report no evidence of sex-related differences in most foraging parameters, except that males dived significantly deeper than females. We found that plasma corticosterone levels and leukocyte profiles showed no significant differences between the sexes. Furthermore, there was no clear relationship between an individual’s foraging behaviour and its plasma corticosterone level or leukocyte profile. In summary, we found no support for sex-related differences in physiological stress levels of Humboldt penguins, and no link between their foraging behaviour and their physiological stress. However, we acknowledge that our sample size is small and that more studies are needed. This study contributes with information on the physiological stress and foraging behaviours of Humboldt penguins in Northern Chile. This information can help to understand context-dependent differences in physiological parameters and foraging behaviours for the species.\nRead more: Link to publication\n\n\n10. Seabird morphology determines operational wind speeds, tolerable maxima, and responses to extremes\nAuthors: Nourani E, Kamran S, de Grissac S, Anderson D, Cole NC, Gremillet D, Lempidakis E, Lerma M, McKee JL, Pichegru :, Provost P, Rattenbourg NC, Ryan P, Santos CD, Schoombie S, Tatayah V, Weimerskirch H, Wikelski M, Shepard ELC\nAbstract Storms can cause widespread seabird stranding and wrecking, yet little is known about the maximum wind speeds that birds are able to tolerate or the conditions they avoid. We analyzed >300,000 h of tracking data from 18 seabird species, including flapping and soaring fliers, to assess how flight morphology affects wind selectivity, both at fine scales (hourly movement steps) and across the breeding season. We found no general preference or avoidance of particular wind speeds within foraging tracks. This suggests seabird flight morphology is adapted to a “wind niche,” with higher wing loading being selected in windier environments. In support of this, wing loading was positively related to the median wind speeds on the breeding grounds, as well as the maximum wind speeds in which birds flew. Yet globally, the highest wind speeds occur in the tropics (in association with tropical cyclones) where birds are morphologically adapted to low median wind speeds. Tropical species must therefore show behavioral responses to extreme winds, including long-range avoidance of wind speeds that can be twice their operable maxima. By contrast, Procellariiformes flew in almost all wind speeds they encountered at a seasonal scale. Despite this, we describe a small number of cases where albatrosses avoided strong winds at close range, including by flying into the eye of the storm. Extreme winds appear to pose context-dependent risks to seabirds, and more information is needed on the factors that determine the hierarchy of risk, given the impact of global change on storm intensity.\nRead more: Link to publication"
  },
  {
    "objectID": "publications.html#section-2",
    "href": "publications.html#section-2",
    "title": "My list of publications",
    "section": "2022",
    "text": "2022\n\n9. Nutritional state variations in a tropical seabird throughout its breeding season\nAuthors: Lerma M, Dehnhard N, Castillo-Guerrero JA, Fernandez G\nAbstract Individual body condition is frequently used to explain differences in foraging and breeding ecology in seabirds. However, little is known about the covariations of body mass with the nutritional state of animals as measured through plasma metabolites and how these different measures vary between and within individuals during breeding. Here, we assessed intra-individual variations of plasma metabolites (triglycerides, cholesterol, protein, and ß-hydroxybutyrate concentrations) and in body mass of Blue-footed boobies (Sula nebouxii) throughout their breeding season 2011–2012 in Isla El Rancho, Mexico. We found breeding-stage and sex-specific variations in individuals’ plasma metabolite concentrations, but these did not mirror variations in body mass. Before egg-laying, females had higher triglycerides, cholesterol, and protein concentrations than males. In contrast, males used their nutritional reserves (higher ß-hydroxybutyrate concentrations) more than females during the breeding season (except for early chick-rearing). At the individual level, males gained weight during the breeding season, whereas females lost weight. We also found that between-individual differences in plasma metabolite concentrations and changes in body mass were not consistent throughout the breeding season, while individual body mass was significantly repeatable. This study contributes to a better understanding of seabird breeding ecology and physiology by showing that sex-specific breeding roles might highly influence the nutritional state. Similar patterns might occur in other seabird species, helping to explain why we can find stage- and sex-specific foraging behaviors even in monomorphic species.\nRead more: Full publication"
  },
  {
    "objectID": "publications.html#section-3",
    "href": "publications.html#section-3",
    "title": "My list of publications",
    "section": "2020",
    "text": "2020\n\n8. Breeding stage, not sex, affects foraging characteristics in masked boobies at Rapa Nui\nAuthors: Lerma M, Dehnhard N, Luna-Jorquera G, Voigt CC, Garthe S\nAbstract Sexual segregation in foraging occurs in some species and populations of boobies (Sulidae), but it is not a general pattern. Sexual segregation in foraging may occur to avoid competition for food, and this competition may intensify during specific stages of breeding. We examined sexual segregation in foraging in relation to breeding stage in masked boobies Sula dactylatra at Rapa Nui by tracking simultaneously incubating and chick-rearing birds using GPS recorders (n = 18) and collected a total of 11 regurgitate samples. Stable isotope analyses (δ13C and δ15N) of whole blood samples were carried out in 20 birds. There were no differences in foraging trip parameters or diet between females and males. Both sexes traveled farther and for longer while incubating than while rearing chicks. Isotopic niches (δ13C and δ15N) overlapped to some degree among all groups at all times, but the lowest overlap between sexes occurred during incubation. While preying on ephemerally distributed flying fish, vertical or horizontal competition avoidance may be almost impossible, and thus females and males share their foraging grounds. Since birds were tracked simultaneously, shorter foraging trips of chick-rearing birds must be an effect of the constraints of provisioning the chick. Differences observed in δ15N and δ13C values between sexes may be caused by subtle differences in their foraging behaviors, or by differences in physiology linked to breeding. Our findings suggest that local oceanography and its inherent food distribution are determinants for sexual segregation in foraging patterns in masked boobies and possibly also other booby species.\nRead more: Full publication\n\n\n7. Foraging ranges of Humboldt penguins Spheniscus humboldti from Tilgo island: the critical need for protecting a unique marine habitat\nAuthors: Quispe R, Lerma M, Luna N, Portflitt-Toro M, Serratosa J, Luna-Jorquera\nAbstract The largest population of Humboldt Penguins resides in a fertile archipelago of the north-central coast of Chile, formed by eight islands in proximity to upwelling centers of the Humboldt Current System. However, five of these islands lack legal protection. Here, we report the results of breeding Humboldt Penguins tracked while foraging from Tilgo Island. The average and maximum foraging radii around the colony were 22 km and 43 km, respectively. Our data indicate that trip ranges overlap areas proposed for industrial projects. Because Humboldt Penguins are sentinels of local ecosystem health, this underscores the value of expanding conservation zones in this unique marine location.\nRead more: Full publication\n\n\n6. Foraging ecology of a marine top predator in the Eastern Tropical Pacific over 3 years with different ENSO phases\nAuthors: Lerma M, Castillo-Guerrero JA Hernandez-Vazquez S, Garthe S\nAbstract The El Niño Southern Oscillation (ENSO) is a recurrent climatic pattern with important ecological consequences for seabirds due to its impacts on the abundance and distribution of food resources. We investigated the effects of ENSO phases on the foraging ecology of a marine top predator at Clarion Island in the Eastern Tropical Pacific using GPS and time-depth recorder data and regurgitates from incubating masked boobies (Sula dactylatra) during 3 consecutive years. Foraging locations were recorded in 2016 (El Niño, one female, three males), 2017 (neutral; six females, nine males), and 2018 (La Niña; eight females, ten males). Local sea surface temperature (SST) and chlorophyll-a concentration (CHL) within the birds’ foraging range were compared among the 3 years. Regurgitates were collected opportunistically from 25 and 31 incubating adults in 2017 and 2018, respectively. Average local CHL and SST were similar among years (mean SST 25 °C; mean CHL 0.10 and of 0.09 mg m−3 in January and March, respectively). Masked boobies travelled a maximum of 66 ± 34 km from the colony. The maximum trip duration was 7.7 ± 3.4 h and total distance travelled during a foraging trip was 164 ± 73 km, with no sex- or year-related differences. Masked boobies mainly caught flying fish, but their diet also included one squid and six other fish families. In contrast to previously reported changes in foraging ecology of seabirds, masked boobies at Clarion Island seemed to be unaffected during El Niño, because the local oceanography was relatively unperturbed by ENSO oscillations.\nRead more: Full publication\n\n\n5. Foraging ecology of masked boobies (Sula dactylatra) in the world’s largest ‘oceanic desert’\nAuthors: Lerma M, Serratosa J, Luna-Jorquera G, Garthe S\nAbstract The South Pacific Gyre has the most hyper-oligotrophic waters in the world and is considered the largest “oceanic desert.” Rapa Nui (Easter Island), located within the South Pacific Gyre, is a breeding ground for masked boobies (Sula dactylatra), which are seabirds with a foraging range that effectively confines them within the gyre. The foraging ecology of this species in the gyre was examined by attaching GPS and time-depth devices to chick-rearing adult birds (9 and 14 birds in 2016 and 2017, respectively) and by collecting regurgitates (18 and 15 samples in 2016 and 2017, respectively). In addition, the birds’ foraging ecology between years was compared. Masked boobies traveled in various directions, dived at unspecific locations, and explored areas < 110 km from the colony. Local environmental conditions were not significantly different between years, and differences in foraging parameters (maximum foraging range, trip duration, and dive depth) were greater among individuals than between years. The foraging characteristics of masked boobies suggest that resources were ephemerally distributed around the colony, with similar abundances across years. Under these conditions, traveling to unspecific locations may increase the area covered and the probability of prey encounter. The spatial and temporal consistencies in environmental conditions explain the uniformity of foraging parameters between years. The ability of masked boobies to exploit ephemerally distributed resources in seascapes like Rapa Nui may help explain its pantropical distribution.\nRead more: Full publication\n\n\n4. Zinc concentrations in Blue-footed booby (Sula nebouxii) eggs, nestlings, and adults\nAuthors: Lerma M, Castillo-Guerrero JA, Garcia-Hernandez J, Fernandez G\nAbstract Zinc is essential for animal metabolism, but the variation in Zn concentrations within seabird populations has been seldom explored. We collected Blue-footed booby (Sula nebouxii) eggs during 2012 and 2013 and blood samples from nestlings and adults during 2011 and 2012 in Sinaloa, Mexico, to evaluate differences in Zn concentrations among years, ages, sexes, and breeding stages. Zinc concentrations in eggs ranged between 27.3 and 64.9 ppm (dry weight), whereas Zn levels in the blood of nestlings and adults ranged between 16.1 and 53.1 ppm (dry weight). Egg Zn concentrations did not differ due to developmental stage, although Zn concentrations were significantly higher in 2013 than in 2012. Nestling Zn concentrations differed between years and decreased gradually with age. Chicks had significantly higher Zn concentrations than those of adults. Once nestlings stopped growing, females presented higher Zn concentrations than males. Adult Zn concentrations were higher during the pre-laying period than during the other breeding stages. Our results suggest that growth, sex, and breeding stage affect blood Zn concentrations, which may be due to stage-specific requirements. When compared with those of other seabird species, the Zn concentrations reported here are intermediate, and we did not detect adverse effects on either nestlings or adults.\nRead more: Full publication"
  },
  {
    "objectID": "publications.html#section-4",
    "href": "publications.html#section-4",
    "title": "My list of publications",
    "section": "2017",
    "text": "2017\n\n3. Non-Breeding Distribution, Abundance, and Roosting Habitat Use of the American Oystercatcher (Haematopus palliatus frazari) in Sinaloa, Mexico\nAuthors: Lerma M, Castillo-Guerrero JA, Palacios E\nAbstract The American Oystercatcher (Haematopus palliatus frazari) is federally listed as endangered in Mexico due to habitat loss and small population size. Recent surveys indicate that the State of Sinaloa supports about half of the breeding population in Mexico. However, no information is available about the non-breeding ecology in Mexico. To assess American Oystercatcher distribution, abundance, and roosting habitat use during the nonbreeding season (3 August 2014-23 January 2015), six bays were surveyed in Sinaloa. A total of 1,351 American Oystercatchers were detected using this area based on maximum count per roosting site at or near high tide. American Oystercatchers roosted in flocks of variable size (3–253 individuals per flock) with Bahía Santa María hosting the main roosting sites in Sinaloa. Mangrove islands and mudflats had larger numbers of individuals than expected relative to the availability of those habitats. The non-breeding Sinaloa population comprised approximately 45.0% of the total H. p. frazari population estimate (n = 3,000 individuals). Bahía Santa María represented 74.6% of the non-breeding population observed in Sinaloa. Thus, Sinaloa, and particularly Bahía Santa María, stand out as critical sites for the conservation of this subspecies. Hypothesized threats to American Oystercatchers were predators, livestock, and human activities.\nRead more: Full Publication\n\n\n2. Lead, cadmium and mercury in the blood of the blue-footed booby (Sula nebouxii) from the coast of Sinaloa, Gulf of California, Mexico\nAuthors: Lerma M, Castillo-Guerrero JA, Ruelas-Inzunza J, Fernandez, G\nAbstract We used blood samples of the Blue-footed Booby, considering sex (female and male) and age-class (adult and chick) of individuals at different breeding stages during two breeding seasons (2010–2011 and 2011–2012) in Isla El Rancho, Sinaloa, to determine lead, cadmium, and mercury concentrations. Lead and cadmium concentrations were below our detection limit (0.05 and 0.36 ppm, respectively). A higher concentration of mercury was found in early stages of breeding, likely related to changes in mercury environmental availability. Mercury concentrations in adults did not relate with their breeding output. Males and adults had higher mercury concentration than females and chicks. We provide information of temporal, sex and age-related variations in the concentrations of mercury in blood of the Blue-footed Booby.\nRead more: Full Publication"
  },
  {
    "objectID": "publications.html#section-5",
    "href": "publications.html#section-5",
    "title": "My list of publications",
    "section": "2016",
    "text": "2016\n\n1. Environmentally-mediated flexible foraging strategies in Brown Boobies in the Gulf of California\nAuthors: Castillo-Guerrero JA, Lerma M, Mellink E, Suazo-Guillén E, Peñaloza-Padilla EA\nAbstract The Brown Booby Sula leucogaster is a seabird with a pantropical distribution across a wide variety of oceanic environments. Sexual size dimorphism in Brown Boobies has been proposed as an explanation for intersexual differences in foraging, but results have been inconsistent. We investigated whether there is context-dependent foraging behaviour driven by local environmental conditions. In this study, we evaluated (1) inter-sex differences in foraging behaviour (by capillary tubes, temperature and depth recorders, and diet) at two colonies in the Gulf of California: Isla San Jorge (ISJ) and Farallón de San Ignacio (FSI) and, (2) intercolonial and interannual differences in foraging behaviour, and (at ISJ) their relationship with local-scale environmental variation, using 5-day composite images of sea surface temperature (SST) and primary productivity (PP) as proxies. Inter-sex differences were few and inconsistent between years, and smaller than overall differences between years and localities. At ISJ, Brown Boobies included more prey species in their diet (27 vs. 19 spp.) and dove shallower (2.3 vs. 3.14 m) than at FSI. At ISJ, Brown Boobies exhibited adjustments in diving depth and prey size as a function of environmental variation: shallower plunge dives and smaller prey items were related with lower SST and higher PP values, whereas deeper dives and larger prey items were related with higher SST and lower PP values. Our results confirmed that the Brown Booby is highly plastic in its foraging ecology, which explains its ability to live in places with large-scale environmental variation (intercolony and interannual), such as tropical areas worldwide.\nRead more: Full Publication"
  },
  {
    "objectID": "teaching/2021-03-01-IntroaR/IntroaR.html",
    "href": "teaching/2021-03-01-IntroaR/IntroaR.html",
    "title": "Clase R desde cero",
    "section": "",
    "text": "Bienvenido!\nEste material fue preparado para técnicos y estudiantes de posgrado del Centro de Investigación de Alimentación y Desarrollo CIAD.\nNo obstante, espero sea de ayuda para cualquiera que tenga intenciones de aprender R.\nIré subiendo materiales conforme se vayan actualizando.\n\n\nEn esta clase aprenderás a abrir RStudio e identificar sus partes. \nClick en la imagen para abrir html o en el botón para descargar pdf.\n\n\n  \n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás a como cargar paquetes, seleccionar tu directorio y cargar tus datos en R. \n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás como funciona ggplot2 y como crear tus propios gráficos.\n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás algunas funciones básicas para realizar operaciones matemáticas en R y como moverte entre tus columnas y filas. \n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás algunas funciones de tidyverse para poder ordenar tus columnas, limpiar tus datos, unir diferentes archivos y exportar tus nuevos data frames.\n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás porque es importante trabajar por proyectos, como crear y compartir un proyecto.\n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás como explorar tus datos, cuales son los argumentos para un modelo lineal simple en R y como agregar la linea de ajuste a tu gráfico.\n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEn esta clase aprenderás como convertir a factor, cuales son los argumentos para un análisis de varianza en R y como crear gráficos para visualizar tus resultados del análisis.\n\n\n  \n\n\n\n  Descargar pdf\n\n\n\n\nEsta clase es una introducción a los modelos mixtos y a la selección de modelos usando el AIC.\n\n\n  \n\n\n\n  Descargar pdf"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#intro",
    "href": "teaching/2021-03-29-rmd/rmd.html#intro",
    "title": "Clase de Rmd",
    "section": "Intro",
    "text": "Intro\nEn esta clase aprenderás como crear documentos en Rmd. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#rmarkdown-para-escribir-artículos",
    "href": "teaching/2021-03-29-rmd/rmd.html#rmarkdown-para-escribir-artículos",
    "title": "Clase de Rmd",
    "section": "Rmarkdown para escribir artículos",
    "text": "Rmarkdown para escribir artículos\nEn esta clase aprenderás como agregar citas y formato de revista. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#presentar-tus-resultados-usando-xaringan",
    "href": "teaching/2021-03-29-rmd/rmd.html#presentar-tus-resultados-usando-xaringan",
    "title": "Clase de Rmd",
    "section": "Presentar tus resultados usando Xaringan",
    "text": "Presentar tus resultados usando Xaringan\nEn esta clase aprenderás como crear presentaciones en Xaringan. Podrás incluir tablas y figuras sin salir de RStudio. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#estilizar-tus-dispositivas-xaringan",
    "href": "teaching/2021-03-29-rmd/rmd.html#estilizar-tus-dispositivas-xaringan",
    "title": "Clase de Rmd",
    "section": "Estilizar tus dispositivas Xaringan",
    "text": "Estilizar tus dispositivas Xaringan\nEn esta clase aprenderás como cambiar el estilo de letras o colores de tus presentaciones en Xaringan. También aprenderás como compartirlas ya sea en github o en pdf. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#github-zenodo-y-git",
    "href": "teaching/2021-03-29-rmd/rmd.html#github-zenodo-y-git",
    "title": "Clase de Rmd",
    "section": "Github, Zenodo y Git",
    "text": "Github, Zenodo y Git\nEn esta clase aprenderás como crear un repositorio en github, como utilizar Zenodo para darle un DOI a nuestros materiales y los básicos de Git. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2021-03-29-rmd/rmd.html#reproducibilidad",
    "href": "teaching/2021-03-29-rmd/rmd.html#reproducibilidad",
    "title": "Clase de Rmd",
    "section": "Reproducibilidad",
    "text": "Reproducibilidad\nEn esta clase verás básicos de reproducibilidad en la ciencia y en las publicaciones. \n\n\n  \n\n\n\n\n Descargar"
  },
  {
    "objectID": "teaching/2023-04-18-intro-to-r/intro-to-r.html#slides",
    "href": "teaching/2023-04-18-intro-to-r/intro-to-r.html#slides",
    "title": "Intro to R",
    "section": "Slides",
    "text": "Slides\n\n\n  \n\n\n\n\n Open"
  },
  {
    "objectID": "teaching/2023-04-18-intro-to-r/intro-to-r.html#downloads",
    "href": "teaching/2023-04-18-intro-to-r/intro-to-r.html#downloads",
    "title": "Intro to R",
    "section": "Downloads",
    "text": "Downloads\nTo download the files for the exercises there are several options:\n\nDirectly from github , go to file, click on raw, select save as. See video here.\nIn firefox , open link, click on three lines icon , and select save page as (or control+S).\nIn chrome , open the link, and click on the share icon .\n\nExercises\n\nR script containing exercises from the first part. Click here.\nCsv file containing penguin data. Click here.\n\nPresentation\nTo download the presentation as pdf click here."
  },
  {
    "objectID": "teaching/2023-05-08-data-wrangling/data-wrangling.html#slides",
    "href": "teaching/2023-05-08-data-wrangling/data-wrangling.html#slides",
    "title": "Data wrangling",
    "section": "Slides",
    "text": "Slides\n\n\n  \n\n\n\n\n Download"
  },
  {
    "objectID": "teaching/2023-05-08-data-wrangling/data-wrangling.html#downloads",
    "href": "teaching/2023-05-08-data-wrangling/data-wrangling.html#downloads",
    "title": "Data wrangling",
    "section": "Downloads",
    "text": "Downloads\nTo download the files there are several options:\n\nDirectly from github , go to file, click on raw, select save as. See video here\nIn firefox , open link, click on three lines icon , and select save page as (or control+S)\nIn chrome , open the link, and click on the share icon \n\nExercises\n\nRmd script containing exercises. Click here to download .\nCsv file containing penguin data. Click here to download ."
  },
  {
    "objectID": "teaching/2023-06-06-plotting/plotting.html#slides",
    "href": "teaching/2023-06-06-plotting/plotting.html#slides",
    "title": "Plotting",
    "section": "Slides",
    "text": "Slides\n\n\n  \n\n\n\n\n Download"
  },
  {
    "objectID": "teaching/2023-06-06-plotting/plotting.html#downloads",
    "href": "teaching/2023-06-06-plotting/plotting.html#downloads",
    "title": "Plotting",
    "section": "Downloads",
    "text": "Downloads\nTo download the files there are several options:\n\nDirectly from github , go to file, click on raw, select save as. See video here.\nIn firefox , open link, click on three lines icon , and select save page as (or control+S)\nIn chrome , open the link, and click on the share icon \n\nExercises\n\nRmd script containing exercises. Click here to download.\nShapefile of Europa. Click here to download.\nRmd script to export word document. Click here to download.\nRmd script to export html document. Click here to download."
  },
  {
    "objectID": "teaching/2023-06-06-tracking/tracking.html",
    "href": "teaching/2023-06-06-tracking/tracking.html",
    "title": "Tracking",
    "section": "",
    "text": "Move\nWelcome!\nThis material was prepared for DDA-FTZ\nThe materials will be updated together with the training.\n\n\nIndex\nIn this presentation:\nLoad data - From movebank - From csv\nTidy - Select columns - Export\nTransform - Converting times\nVisualise - Plot - Map\n\n\nSlides\n\n\n  \n\n\n\n\n Open"
  },
  {
    "objectID": "teaching/2024-12-06-tracking/tracking_2024.html",
    "href": "teaching/2024-12-06-tracking/tracking_2024.html",
    "title": "Animal tracking",
    "section": "",
    "text": "There are numerous tools available for analyzing tracking data. In this post, I share a curated collection of my blog entries that focus specifically on movement analysis, covering from data loading and cleaning to visualizations. Additionally, I’ve included a brief list of papers that can serve as guidance when embarking on tracking studies.\n\n\n\nFrom movebank\n\nFrom csv\n\n\n\n\n\nUsage of time formats\n\nConverting times\n\nTime overlap between individuals\n\nLocate the animals central location\n\nInclude Julian days\n\nIdentify Day or night\n\nCalculate speed\n\nBehaviour classification\n\n\n\n\n\nSelect columns\n\nRemove undesired locations\n\nIdentify gaps\n\nComplete or incomplete\n\nExport clean data frame\n\n\n\n\n\nNumber of trips: Identify events\n\nMaximum distance: Distance from point\n\nTotal length path: Distance between points\n\n\n\n\n\nKernel UD considerations\n\nInterpolate a path\n\nCalculate UD and export shapefiles\n\nCalculate shared areas\n\n\n\n\n\nIn land or not\n\n\n\n\n\nPlot basics\n\nCreate a base map in R\n\nInside plot legend\n\nAnimations"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html",
    "title": "AI Tools in Research",
    "section": "",
    "text": "AI Tools in Research\nThis collection of materials has been compiled by Dagmar Cimiotti and Miriam Lerma, presenting a curated selection of AI tools that are reshaping research. It includes not only an curated list of tools but also practical examples of how these tools can be used.\nIn addition to the tools themselves, implications of AI in research are presented. The goal is to open the discussion on how these technologies can impact the efficiency and integrity of scientific research. Moreover, with the rise of AI in research there are implications from the journals, reviewers and the authors point-of-view by using this technology.\nThis resource goal is to be a guide for those looking to start using AI while considering the broader impact these tools may have on the future of academia and the environment.\n\n\n\n\n\n\nClick on the image to open the pdf"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#artificial-intelligence",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#artificial-intelligence",
    "title": "AI Tools in Research",
    "section": "Artificial Intelligence",
    "text": "Artificial Intelligence\nThe term ‘artificial intelligence’ (AI) was first coined by John McCarthy at a conference in Dartmouth in 1956. Since then, a lot has happened. Large language models (LLM) are a type of AI and have enormous value across the entire value chain of research. \nThey have potential applications in the automation of research techniques\n- Generating a hypothesis (ChatGPT) - Searching for content and get the sources (“grey” literature, laws, scientific publications; perplexity.ai)\n- Searching scientifically published content (scite, connectedpapers)\n- Assist in writing scripts for QGIS (Quantum GIS) and R programming, and Excel-questions (ChatGPT)\n- Detecting plagiarism (quillbot)\n- Improving readability (Grammarly, ChatGPT)\n- Translating (deepl)\n- Creating pictures for presentations / posters (Image Creator from Bing)"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#limitations",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#limitations",
    "title": "AI Tools in Research",
    "section": "Limitations",
    "text": "Limitations\nAI relies heavily on the quality of input data and researchers need to be mindful of this fact. Biased or incomplete datasets can lead to inaccurate insights.\nAdditionally, it can be extremely difficult – and sometimes impossible – to know how complex machine learning models have arrived at a particular decision. This is known as the ‘black box’ problem and means it can be challenging for humans to understand how the model arrived at a particular conclusion or prediction based on its input data."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#chatgpt",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#chatgpt",
    "title": "AI Tools in Research",
    "section": "ChatGPT?",
    "text": "ChatGPT?\nOpenAI announced the groundbreaking release of ChatGPT in 2022, an online chatbot that enables users to interact with the GPT-3.5 language model.\nChatGPT is a type of narrow AI (also known as weak AI) because it is designed to perform specific tasks, such as natural language processing and generation, within a defined scope. It does not possess general intelligence or self-awareness, and its capabilities are limited to the tasks it’s trained on, such as answering questions and generating text based on input.\nChatGPT creators include Ilya Sutskever, chief scientist and cofounder OpenAI. His company was showered with billions of dollars by Microsoft. Among founders are Elon Musk and Amazon Web Services."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#trying-chatgpt",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#trying-chatgpt",
    "title": "AI Tools in Research",
    "section": "Trying ChatGPT",
    "text": "Trying ChatGPT\n\nLink: webpage https://chatgpt.com/\nNewest update: Jan. 2025 (Version ChatGPT 4omini)\nFree\nWhy „Log in?“\nMore personalized and continuous support (timeline).\nNot really necessary.\nChatGPT Plus: Necessary to log in\n23 EUR\nAlways newest ChatGPT version possible\nMore “thinking processes” before answering\nStill fast and working when too many people use ChatGPT\n\n3.App: Just nicer to handle on smartphone. Same functions as web version."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#trying-chatgpt-1",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#trying-chatgpt-1",
    "title": "AI Tools in Research",
    "section": "Trying ChatGPT",
    "text": "Trying ChatGPT\nFor tutorials and problem solving:\n- Incredibly helpful and time saving\nFor literature search:\n- Journal exists\n- Authors exist\nPaper: Does not exist"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#perplexity.ai",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#perplexity.ai",
    "title": "AI Tools in Research",
    "section": "Perplexity.ai",
    "text": "Perplexity.ai\nFor literature search:\nIncludes grey literature\nPeer-review and grey literature seem to be considered equally relevant\nGives data-resources with links"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#scite.ai",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#scite.ai",
    "title": "AI Tools in Research",
    "section": "Scite.ai",
    "text": "Scite.ai\nFor literature search:\nHelpful but limited in the number of free prompts\nInformation still needs to be double-checked"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#connected-papers",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#connected-papers",
    "title": "AI Tools in Research",
    "section": "Connected papers",
    "text": "Connected papers\nFor literature search:\nHelpful for literature search, but most (if not all) literature must have a doi."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#ai-europe-alternatives",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#ai-europe-alternatives",
    "title": "AI Tools in Research",
    "section": "AI Europe alternatives",
    "text": "AI Europe alternatives\nMistral AI (France)\nAleph alpha (Germany)"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-journals",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-journals",
    "title": "AI Tools in Research",
    "section": "In Research: Journals",
    "text": "In Research: Journals\nDeclaration of generative AI in scientific writing\nAuthors must declare the use of generative AI in scientific writing upon submission of the paper. The following guidance refers only to the writing process, and not to the use of AI tools to analyze and draw insights from data as part of the research process: Generative AI and AI-assisted technologies should only be used in the writing process to improve the readability and language of the manuscript.\nThe technology must be applied with human oversight and control and authors should carefully review and edit the result, as AI can generate authoritative-sounding output that can be incorrect, incomplete or biased. Authors are ultimately responsible and accountable for the contents of the work.\nAuthors must not list or cite AI and AI-assisted technologies as an author or co-author on the manuscript since authorship implies responsibilities and tasks that can only be attributed to and performed by humans.\nThe use of generative AI and AI-assisted technologies in scientific writing must be declared by adding a statement at the end of the manuscript when the paper is first submitted. The statement will appear in the published work and should be placed in a new section before the references list.\nSource: Journal of Experimental Marine Biology and Ecology"
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-reviewers",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-reviewers",
    "title": "AI Tools in Research",
    "section": "In Research: Reviewers",
    "text": "In Research: Reviewers\nReviews can be discarded if they are found to be primarily generated by an AI software.\nJournals are using AI detectors to identify if the review was human generated. For example: gptzero."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-authors",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#in-research-authors",
    "title": "AI Tools in Research",
    "section": "In Research: Authors",
    "text": "In Research: Authors\nAuthors should be careful when using this technology and carefully review and edit the result. Authors are ultimately responsible and accountable for the contents of the work.\nImages generated using AI also had been retracted. There are negative implications while using misleading images."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#potential",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#potential",
    "title": "AI Tools in Research",
    "section": "Potential",
    "text": "Potential\nChatGPT and its counterparts are here to stay. For this reason, it is crucial to understand its capabilities in the research field, as well as its limitations and potential ethical shortcomings."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#environmental-impacts",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#environmental-impacts",
    "title": "AI Tools in Research",
    "section": "Environmental impacts",
    "text": "Environmental impacts\nThere is a negative side to the explosion of AI and its associated infrastructure, according to a growing body of research.\n- The proliferating data centers that house AI servers produce electronic waste.\n- They are large consumers of water, which is becoming scarce in many places.\n- They rely on critical minerals and rare elements, which are often mined unsustainably.\n- And they use massive amounts of electricity, spurring the emission of planet-warming greenhouse gases."
  },
  {
    "objectID": "teaching/2025-02-19-ai-tools/ai-tools.html#take-home-messages",
    "href": "teaching/2025-02-19-ai-tools/ai-tools.html#take-home-messages",
    "title": "AI Tools in Research",
    "section": "Take-home messages",
    "text": "Take-home messages\nAI tools are here to stay, and many researchers are already using them.\n- AI tools save us a lot of time, but we must be careful when evaluating the responses they give us; critical thinking becomes key.\n- Do not blindly trust the information, always double-check.\n- We must also be mindful of using these technologies, as they have a real impact on the environment."
  },
  {
    "objectID": "teaching/2025-04-01-journals/journals.html",
    "href": "teaching/2025-04-01-journals/journals.html",
    "title": "Choosing a journal",
    "section": "",
    "text": "Choosing a journal\nIn this blog post, I provide a decision tree with that might help you choose the most suitable journal for publishing your research.\nI’ll also share tips and links to get you started, focusing on journal scope, open access fees, impact factor, DOI, peer review process, and publication timelines.\nI briefly share my own experiences. In addition, I offer a brief list of journals that publish ornithological research, complete with a map to guide your selection.\nThe goal is to be a guide for those looking to submit papers into an ornithological journals.\n\n\nClick on the image to open the pdf\n\n\n  \n\n\n\n\nLinks to journals\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJournal\nLink\n\n\n\n\nActa ornithologica\nhttps://bioone.org/journals/acta-ornithologica/current\n\n\nArdea\nhttps://bioone.org/journals/ardea\n\n\nArdeola\nhttps://www.ardeola.org/es/autores/\n\n\nAustral ecology\nhttps://onlinelibrary.wiley.com/journal/14429993\n\n\nAvian Research\nhttps://www.sciencedirect.com/journal/avian-research\n\n\nBehavioural ecology and sociobiology\nhttps://link.springer.com/journal/265\n\n\nBird Conservation International\nhttps://www.cambridge.org/core/journals/bird-conservation-international\n\n\nBird study\nhttps://www.tandfonline.com/journals/tbis20\n\n\nEcology\nhttps://esajournals.onlinelibrary.wiley.com/journal/19399170\n\n\nEcology and Evolution\nhttps://onlinelibrary.wiley.com/journal/20457758\n\n\nEcology letters\nhttps://onlinelibrary.wiley.com/journal/14610248\n\n\nEcosphere\nhttps://esajournals.onlinelibrary.wiley.com/journal/21508925\n\n\nEmu\nhttps://www.tandfonline.com/journals/temu20\n\n\nIbis\nhttps://onlinelibrary.wiley.com/journal/1474919x\n\n\nJournal of Animal Ecology\nhttps://besjournals.onlinelibrary.wiley.com/journal/13652656\n\n\nJournal of Avian Biology\nhttps://nsojournals.onlinelibrary.wiley.com/journal/1600048x\n\n\nJournal of Field Ornithology\nhttps://journal.afonet.org/\n\n\nJournal of Ornithology\nhttps://link.springer.com/journal/10336\n\n\nJournal of Sea Research\nhttps://www.sciencedirect.com/journal/journal-of-sea-research\n\n\nMarine Biology\nhttps://link.springer.com/journal/227\n\n\nMarine ecology\nhttps://onlinelibrary.wiley.com/journal/14390485\n\n\nMarine Ecology Progress Series\nhttps://www.int-res.com/journals/meps/meps-home/\n\n\nMarine Ornithology\nhttp://www.marineornithology.org/\n\n\nMovement ecology\nhttps://movementecologyjournal.biomedcentral.com/about\n\n\nOecologia\nhttps://link.springer.com/journal/442\n\n\nOikos\nhttps://nsojournals.onlinelibrary.wiley.com/journal/1600048x\n\n\nOrnithologia Neotropical\nhttps://journals.sfu.ca/ornneo/index.php/ornneo/about/submissions\n\n\nOrnithological applications\nhttps://academic.oup.com/condor\n\n\nOrnithology\nhttps://academic.oup.com/auk\n\n\nOrnithology research\nhttps://link.springer.com/journal/43388\n\n\nPacific Science\nhttps://bioone.org/journals/pacific-science\n\n\nThe Auk - Now Ornithology\nhttps://americanornithology.org/publications/ornithology/\n\n\nThe Condor - Now Ornithological applications\nhttps://americanornithology.org/publications/ornithological-applications/\n\n\nTropical Zoology\nhttps://www.pagepress.org/biology/index.php/tz\n\n\nWaterbirds\nhttps://bioone.org/journals/waterbirds/scope-and-details\n\n\nWilson Journal of Ornithology\nhttps://wilsonsociety.org/pubs/wjo/"
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Choosing a journal\n\n\n\n\n\nA file with a decision tree that might help you choose the most suitable journal for publishing your research. Links to journals are included.\n\n\n\n\n\n\nApr 1, 2025\n\n\n\n\n\n\n  \n\n\n\n\nAI Tools in Research\n\n\n\n\n\nA presentation with a compilation of AI Tools and its implications in research.\n\n\n\n\n\n\nFeb 19, 2025\n\n\n\n\n\n\n  \n\n\n\n\nAnimal tracking\n\n\n\n\n\nA curated collection of my blog posts focused on animal tracking analysis.\n\n\n\n\n\n\nDec 6, 2024\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nPlotting\n\n\n\n\n\nUsing ggplot to create plots and maps.\n\n\n\n\n\n\nJun 6, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nTracking\n\n\n\n\n\nA presentation with tips and tools to put you analyses on a workflow.\n\n\n\n\n\n\nJun 6, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nData wrangling\n\n\n\n\n\nLoad data, basic calculations, tidydata, pipe operations, join and export data frames.\n\n\n\n\n\n\nMay 8, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nIntro to R\n\n\n\n\n\nFirst steps into R. Install or update R. Workspace panes. Packages. Directories. Load data.\n\n\n\n\n\n\nApr 18, 2023\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nClase de Rmd\n\n\n\n\n\nDesde como crear documentos en Rmd hasta como compartirlos.\n\n\n\n\n\n\nMar 16, 2021\n\n\nMiriam Lerma\n\n\n\n\n\n\n  \n\n\n\n\nClase R desde cero\n\n\n\n\n\nDesde como abrir R y RStudio hasta como exportar tus gráficos, la idea es que este curso te haga sentir cómodo trabajando tus datos y análisis en R.\n\n\n\n\n\n\nJan 28, 2021\n\n\n\n\n\n\nNo matching items"
  }
]