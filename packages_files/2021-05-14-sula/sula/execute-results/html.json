{
  "hash": "c889b680c2a7bbcd63d4b4c059b0a305",
  "result": {
    "markdown": "---\ntitle: \"sula\"\ndescription: |\n  Functions to clean your data and calculate the foraging trip parameters of the individuals. \nauthor:\n  - name: Miriam Lerma\ndate: 2021-05-15\nimage: sula_front.png\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    toc-location: left\n    css: styles.css\n---\n\n\n\n# Intro\n\nEste paquete contiene:\n\n-   **Datos** de tracks de kena (*Sula dactylatra*) colectados en Rapa Nui para replicar los ejemplos 🗿\n-   **Trece funciones** para limpiar y calcular parámetros de viajes a partir de datos GPS Detailed information and uses: <https://github.com/MiriamLL/sula>\n\n## Instalación\n\nPuedes instalar este paquete desde [GitHub](https://github.com/) usando:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"MiriamLL/sula\")\n```\n:::\n\n\n# Datos\n\nCarga la librería\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sula)\n```\n:::\n\n\n## Un individuo\n\nCarga los datos de GPS de un individuo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(GPS_01)\n```\n:::\n\n\n**Nota** Incluye columna con fecha y hora en formato POSIXct\n\n## Notas de campo\n\nIncluye el periodo cuando se colocó el dispositivo hasta cuando se retiró.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNotas<-Notas\n```\n:::\n\n\n**Nota**: no corresponden al periodo real de muestreo. Se proveen estos datos para practicar las funciones.\n\n# Funciones\n\n## ajustar_hora\n\nEsta función corrige el tiempo de acuerdo a la zona horaria, se necesita especificar los datos GPS, el nombre de la columna que contiene datos de hora y día, el formato en el que están éstos datos, y el número de horas de diferencia a corregir de acuerdo al GMT.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGPS_gmt<-ajustar_hora(GPS_data = GPS_raw,\n                      dia_col = 'DateGMT',\n                      hora_col = 'TimeGMT',\n                      formato=\"%d/%m/%Y %H:%M:%S\",\n                      dif_hor = 5)\n```\n:::\n\n\nRegresa el mismo data frame con dos columnas adicionales: **dia_hora** con el día y fecha original y **hora_corregida** con la hora correspondiente al GMT.\n\n## recortar_periodo\n\nEste función permite recortar periodos dentro de los datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGPS_recortado<-recortar_periodo(GPS_data=GPS_01,\n                                inicio='02/11/2017 18:10:00',\n                                final='05/11/2017 14:10:00',\n                                dia_col='DateGMT',\n                                hora_col='TimeGMT',\n                                formato=\"%d/%m/%Y %H:%M:%S\")\n```\n:::\n\n\nNota: El formato de tiempo y hora debe ser el mismo formato que el formato de inicio y final.\n\n## localizar_nido\n\nEsta función usa el primer valor de los datos de GPS como punto de la colonia, sirve para identificar la localización del nido por individuo. Regresa un nuevo data frame con dos columnas: Latitude y Longitude correspondientes a la localización del nido.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnest_loc<-localizar_nido(GPS_data = GPS_01,\n                          lat_col=\"Latitude\",\n                          lon_col=\"Longitude\")\n```\n:::\n\n\n**Nota** Asume que los datos del nido corresponde al primer registro de GPS.\n\n## identificar_viajes️\n\nEsta función agrega una columna de acuerdo a distancia de la colonia para determinar si esta en un viaje de alimentación o no.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nGPS_trip<-identificar_viajes(GPS_data=GPS_01,\n                        nest_loc=nest_loc,\n                        distancia_km=1)\n```\n:::\n\n\nEn la columna llamada trip:\\\n**N**=dentro de la distancia considerada como no viaje de alimentación, y\\\n**Y**=viaje de alimentación.\n\n## contar_viajes\n\nEsta función agrega una columna con el número del viaje y elimina locaciones dentro de el radio de la colonia.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nGPS_edited<-contar_viajes(GPS_data=GPS_trip)\n```\n:::\n\n\n## dist_colonia\n\nAgrega una columna con la distancia de la colonia de cada punto. Regresa el mismo data frame con una nueva columna llamada 'maxdist_km.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nGPS_dist<-dist_colonia(GPS_edited = GPS_edited, \n                       nest_loc=nest_loc)\n```\n:::\n\n\n**Nota** usa CRS: 4326. Enlaces: [¿referencia geográfica?](https://mgimond.github.io/Spatial/chp09-0.html), [¿cual usar?](https://geocompr.robinlovelace.net/reproj-geo-data.html)\n\n## dist_puntos\n\nAgrega una columna con la distancia entre cada punto. Regresa el mismo data frame con una nueva columna llamada 'pointsdist_km'.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\nGPS_dist<-dist_puntos(GPS_data = GPS_edited,\n                      separador='trip_number')\n```\n:::\n\n\n**Nota** usa CRS: 4326. Incluye NAs al inicio del viaje. Enlaces: [¿referencia geográfica?](https://mgimond.github.io/Spatial/chp09-0.html), [¿cual usar?](https://geocompr.robinlovelace.net/reproj-geo-data.html)\n\n## calcular_duracion ⏳\n\nIdentifica el inicio y el final del viaje y calcula la duración. Regresa un nuevo data frame con 4 columnas: trip_id, trip_start, trip_end y duration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nduracion<-calcular_duracion(GPS_data = GPS_edited,\n                            col_diahora = \"tStamp\",\n                            formato = \"%Y-%m-%d %H:%M:%S\",\n                            unidades=\"hours\",\n                            separador=\"trip_number\")\n```\n:::\n\n\n**Nota** la duración se calcula en valores númericos.\n\n## calcular_totaldist\n\nCalcula distancia recorrida de la colonia por viaje.\\\nDebe contener la columna Longitude y Latitude con estos nombres.\\\nRegresa un nuevo data frame con la distancia total recorrida por viaje.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotaldist_km<-calcular_totaldist(GPS_data= GPS_edited,\n                                 separador=\"trip_number\")\n```\n:::\n\n\n## calcular_maxdist\n\nObtiene la distancia máxima de la colonia por viaje.\\\nDebe contener la columna Longitude y Latitude con estos nombres.\\\nRegresa un nuevo data frame con la distancia máxima de la colonia por viaje.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaxdist_km<-calcular_maxdist(GPS_data = GPS_edited, \n                             nest_loc=nest_loc,\n                             separador=\"trip_number\")\n```\n:::\n\n\n## calcular_tripparams\n\nCalcula la duración de los viajes, la distancia máxima de la colonia y la distancia total recorrida. Regresa un nuevo data frame con los parámetros por viaje.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrip_params<-calcular_tripparams(GPS_data = GPS_edited,\n                              diahora_col = \"tStamp\",\n                              formato = \"%Y-%m-%d %H:%M:%S\",\n                              nest_loc=nest_loc,\n                              separador=\"trip_number\")\n```\n:::\n\n\n# Citar\n\n-   Lerma M (2021) Package sula. Zenodo. ttps://doi.org/10.5281/zenodo.4740920[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4740920.svg)](https://doi.org/10.5281/zenodo.4740920)\n\n-   Los datos de prueba vienen de la publicación: Lerma M, Dehnhard N, Luna-Jorquera G, Voigt CC, Garthe S (2020) Breeding stage, not sex, affects foraging characteristics in masked boobies at Rapa Nui. Behavioral ecology and sociobiology 74: 149. [🔓](https://link.springer.com/article/10.1007/s00265-020-02921-1)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}